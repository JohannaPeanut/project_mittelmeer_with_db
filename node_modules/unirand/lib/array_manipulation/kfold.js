"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _base = _interopRequireDefault(require("./base"));

var _shuffle = _interopRequireDefault(require("./shuffle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var KFold = /*#__PURE__*/function (_ArrayManipulation) {
  _inherits(KFold, _ArrayManipulation);

  var _super = _createSuper(KFold);

  function KFold() {
    var _this;

    _classCallCheck(this, KFold);

    _this = _super.call(this);
    _this._shuffle = new _shuffle["default"]();
    return _this;
  }
  /**
   * Get k-fold sets
   * @public
   */


  _createClass(KFold, [{
    key: "getKFold",
    value: function getKFold(input, k) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        type: 'list',
        derange: false
      };

      this._validateInput(input, false);

      if (typeof k !== 'number') {
        throw new Error('k-fold: Parameter "k" should be a number');
      }

      if (k > input.length || k <= 0) {
        throw new Error('k-fold: Parameter "k" should be greater then 0 and less input.length');
      }

      var folds = this._getFolds(input.length, k);

      var permutedInput;

      if (!options.derange) {
        permutedInput = this._shuffle.getPermutation(input);
      } else {
        permutedInput = this._shuffle.getDerangement(input);
      }

      if (options.type === 'list') {
        return this._getListSetKFold(permutedInput, folds, []);
      } else if (options.type === 'set') {
        return this._getListSetKFold(permutedInput, folds, {});
      } else if (options.type === 'crossvalidation') {
        return this._getCrossValidationKFold(permutedInput, folds);
      }

      throw new Error('k-fold: Wrong output type, should be "list", "set" or "crossvalidation"');
    }
    /**
     * Generates kfold output for "crossvalidation" type
     * @param {*} permutedInput 
     * @param {*} folds 
     * @param {*} result 
     */

  }, {
    key: "_getCrossValidationKFold",
    value: function _getCrossValidationKFold(permutedInput, folds) {
      var result = [];

      var listFolds = this._getListSetKFold(permutedInput, folds, []);

      for (var i = 0; i < listFolds.length; i += 1) {
        result.push({
          id: i,
          test: listFolds[i].slice(),
          data: this._generateData(listFolds, i)
        });
      }

      return result;
    }
    /**
     * Genarates data for crossvalidation
     * Collects all data from all folds except fold[i]
     * @param {RandomArrayStringObject<any>} listFolds 
     * @param {number} i
     * @private
     */

  }, {
    key: "_generateData",
    value: function _generateData(listFolds, i) {
      var result = [];

      for (var j = 0; j < i; j += 1) {
        this._addSubData(listFolds[j], result);
      }

      for (var _j = i + 1; _j < listFolds.length; _j += 1) {
        this._addSubData(listFolds[_j], result);
      }

      return result;
    }
    /**
     * @param {RandomArrayStringObject<any>} listFolds 
     * @param {Array<RandomArrayStringObject<any>>} result
     * @private
     */

  }, {
    key: "_addSubData",
    value: function _addSubData(listFolds, result) {
      for (var k = 0; k < listFolds.length; k += 1) {
        result.push(listFolds[k]);
      }
    }
    /**
     * Generates kfold output for "list" and "set" types
     * @param {RandomArrayString<number | string>} permutedInput
     * @param {Array<number>} folds
     * @param {RandomArrayStringObject<any>} result
     * @private
     */

  }, {
    key: "_getListSetKFold",
    value: function _getListSetKFold(permutedInput, folds, result) {
      var pindex = 0;
      var subResult = [];

      for (var i = 0; i < folds.length; i += 1) {
        for (var j = 0; j < folds[i]; j += 1) {
          subResult[j] = permutedInput[pindex];
          pindex += 1;
        }

        result[i] = subResult;
        subResult = [];
      }

      return result;
    }
    /**
     * Construct an array of "k" elements with with number of items in each fold
     * Max and min count of items differ at most of 1
     * Sum of all items shoul be "n"
     * @param {number} n - number of elements
     * @param {number} k - number of folds
     * @private
     */

  }, {
    key: "_getFolds",
    value: function _getFolds(n, k) {
      var result = [];
      var initialCount = Math.floor(n / k);
      var remain = n - k * initialCount;

      for (var i = 0; i < k; i += 1) {
        if (remain === 0) {
          result[i] = initialCount;
          continue;
        }

        result[i] = initialCount + 1;
        remain -= 1;
      }

      return result;
    }
  }]);

  return KFold;
}(_base["default"]);

var _default = KFold;
exports["default"] = _default;