"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _base = _interopRequireDefault(require("./base"));

var _percentiles2 = _interopRequireDefault(require("../analyzer/percentiles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Winsorize = /*#__PURE__*/function (_ArrayManipulation) {
  _inherits(Winsorize, _ArrayManipulation);

  var _super = _createSuper(Winsorize);

  function Winsorize() {
    _classCallCheck(this, Winsorize);

    return _super.call(this);
  }

  _createClass(Winsorize, [{
    key: "winsorize",
    value: function winsorize(input) {
      var limits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.05;
      var mutate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      this._validateInput(input, false);

      this._percentile = new _percentiles2["default"](input.slice());

      var _percentileLimits = this._parseLimits(limits),
          _percentiles = this._percentile.percentile(_percentileLimits),
          min_percentile_value = this._binarySearch(_percentiles[0]),
          max_percentile_value = this._binarySearch(_percentiles[1]);

      if (mutate === false) {
        input = input.slice();
      } // Change input array values


      for (var i = 0; i < input.length; i += 1) {
        if (input[i] < _percentiles[0]) {
          input[i] = min_percentile_value;
        }

        if (input[i] > _percentiles[1]) {
          input[i] = max_percentile_value;
        }
      }

      return input;
    }
  }, {
    key: "_parseLimits",
    value: function _parseLimits(limits) {
      if (typeof limits === 'number') {
        if (limits >= 0.5 || limits <= 0) {
          throw new Error('Winsorize: limits should be less then 0.5 and greater then 0');
        }

        return [limits, 1 - limits];
      } else if (Array.isArray(limits)) {
        var limit1 = limits[0],
            limit2 = limits[1];

        if (typeof limit1 !== 'number' || typeof limit2 !== 'number') {
          throw new Error('Winsorize: should point limits as numbers');
        }

        if (limit1 <= 0 || limit1 >= 1 || limit2 <= limit1 || limit2 >= 1) {
          throw new Error('Winsorize: You should point correct limits');
        }

        return [limit1, limit2];
      }

      return [0.05, 0.95];
    }
    /**
     * Binary search for elements less then lower percentile
     * and elements greater then upper percentile
     * @private
     */

  }, {
    key: "_binarySearch",
    value: function _binarySearch(value) {
      var start = 0,
          stop = this._percentile.randomArray.length - 1,
          middle;

      while (start <= stop) {
        middle = Math.floor((stop + start) / 2);

        if (value < this._percentile.randomArray[middle]) {
          stop = middle - 1;
        } else if (value > this._percentile.randomArray[middle]) {
          start = middle + 1;
        } else {
          return this._percentile.randomArray[middle];
        }
      }

      return this._percentile.randomArray[start] - value < value - this._percentile.randomArray[stop] ? this._percentile.randomArray[start] : this._percentile.randomArray[stop];
    }
  }]);

  return Winsorize;
}(_base["default"]);

var _default = Winsorize;
exports["default"] = _default;