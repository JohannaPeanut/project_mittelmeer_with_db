"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Array manipulation base class
 * Created by Alexey S. Kiselev
 */
var ArrayManipulation = /*#__PURE__*/function () {
  function ArrayManipulation() {
    _classCallCheck(this, ArrayManipulation);
  }

  _createClass(ArrayManipulation, [{
    key: "_validateInput",

    /**
     * Validate input
     * @param input: any
     * @param allowObjects: boolean - allow objects checking
     * @private
     */
    value: function _validateInput(input) {
      var allowObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (Array.isArray(input) || typeof input === 'string') {
        if (input.length === 0) {
          throw new TypeError('Input length must be greater then zero');
        }
      } else if (allowObjects && _typeof(input) === 'object') {
        if (Object.keys(input).length === 0) {
          throw new TypeError('Input object must have at least one key');
        }
      } else if (allowObjects) {
        throw new TypeError('Input must be array, string or object');
      } else throw new TypeError('Input must be array or string');
    }
  }]);

  return ArrayManipulation;
}();

var _default = ArrayManipulation;
exports["default"] = _default;