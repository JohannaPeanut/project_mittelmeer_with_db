"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _movingAverage = _interopRequireDefault(require("./movingAverage"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AnalyzerMethods = require('../../analyzer');

var DEFAULT_SMOOTH_ALGORITHM = 'moving_average';

var SmoothProxy = /*#__PURE__*/function () {
  function SmoothProxy() {
    _classCallCheck(this, SmoothProxy);

    this._allowedSmoothAlgorithms = {
      'moving_average': _movingAverage["default"]
    };
    this._smoothAlgorithms = {};
    this.setSmoothAlgorithm(DEFAULT_SMOOTH_ALGORITHM);
  }
  /**
   * Apply smoothing using different algorithms and parameters
   * @param {RandomArray} data
   * @param {{[string]: any}} options
   * @returns {RandomArray}
   */


  _createClass(SmoothProxy, [{
    key: "smoothSync",
    value: function smoothSync(data) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (options && options.algorithm) {
        this.setSmoothAlgorithm(options.algorithm);
      }

      if (options && options.diff) {
        var smoothData = this._currentSmoothAlgorithm.smooth(data, options);

        return {
          smoothData: smoothData,
          diff: this._constructDiff(data, smoothData)
        };
      }

      return this._currentSmoothAlgorithm.smooth(data, options);
    }
  }, {
    key: "smooth",
    value: function smooth(data) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          try {
            resolve(_this.smoothSync(data, options));
          } catch (e) {
            reject(e.message);
          }
        }, 0);
      });
    }
    /**
     * Sets algorithm
     * @param {string} name
     */

  }, {
    key: "setSmoothAlgorithm",
    value: function setSmoothAlgorithm(name) {
      if (!this._allowedSmoothAlgorithms[name]) {
        throw new Error("Smooth: algorithm ".concat(name, " is not allowed"));
      }

      if (!this._smoothAlgorithms[name]) {
        this._smoothAlgorithms[name] = new this._allowedSmoothAlgorithms[name]();
      }

      this._currentSmoothAlgorithmName = name;
      this._currentSmoothAlgorithm = this._smoothAlgorithms[name];
    }
    /**
     * Returns current algorithm name
     * @returns {string}
     */

  }, {
    key: "getAlgorithmName",
    value: function getAlgorithmName() {
      return this._currentSmoothAlgorithm.getName();
    }
    /**
     * Returns a list of allowed algorithms
     * @returns {Array<string>}
     */

  }, {
    key: "listSmoothAlgorithms",
    value: function listSmoothAlgorithms() {
      return Object.keys(this._allowedSmoothAlgorithms);
    }
    /**
     * Returns default smooth algorithm name
     * @returns {string}
     */

  }, {
    key: "getDefaultAlgorithmName",
    value: function getDefaultAlgorithmName() {
      return DEFAULT_SMOOTH_ALGORITHM;
    }
    /**
     * Construct diff data and analyze it
     * @param {RandomArray} initialData
     * @param {RandomArray} smoothData
     * @returns {{[string]: any}}
     * @private
     */

  }, {
    key: "_constructDiff",
    value: function _constructDiff(initialData, smoothData) {
      var diffData = [];

      for (var i = 0; i < initialData.length; i += 1) {
        diffData[i] = initialData[i] - smoothData[i];
      } // analyze diff


      var result = {
        diffData: diffData
      };
      Object.keys(AnalyzerMethods).forEach(function (mKey) {
        var methodsClass = AnalyzerMethods[mKey].getInstance(diffData, {
          pdf: 20 // TODO: add it to smooth params

        });

        for (var prop in methodsClass.constructor.publicMethods) {
          result[prop] = methodsClass[prop];
        }
      });
      return result;
    }
  }]);

  return SmoothProxy;
}();

var _default = SmoothProxy;
exports["default"] = _default;