"use strict";

var _prngProxy = _interopRequireDefault(require("../prng/prngProxy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Exponential = /*#__PURE__*/function () {
  function Exponential(lambda) {
    _classCallCheck(this, Exponential);

    this.lambda = Number(lambda);
  }
  /**
   * Generates a random number
   * @returns a exponential distributed number
   */


  _createClass(Exponential, [{
    key: "random",
    value: function random() {
      return this._random(_prngProxy["default"].random());
    }
    /**
     * Generates next seeded random number
     * @returns {number}
     */

  }, {
    key: "next",
    value: function next() {
      return this._random(_prngProxy["default"].next());
    }
  }, {
    key: "_random",
    value: function _random(u) {
      return -Math.log(u) / this.lambda;
    }
    /**
     * Generates exponential distributed numbers
     * @param n: number - Number of elements in resulting array, n > 0
     * @returns Array<number> - exponential distributed numbers
     */

  }, {
    key: "distribution",
    value: function distribution(n) {
      var exponentialArray = [],
          random = _prngProxy["default"].random(n);

      for (var i = 0; i < n; i += 1) {
        exponentialArray[i] = this._random(random[i]);
      }

      return exponentialArray;
    }
    /**
     * Error handling
     * @returns {boolean}
     */

  }, {
    key: "isError",
    value: function isError() {
      if (!this.lambda) {
        return {
          error: 'Exponential distribution: you should point parameter "lambda" with numerical value'
        };
      }

      if (this.lambda <= 0) {
        return {
          error: 'Exponential distribution: parameter "lambda" must be a positive number'
        };
      }

      return {
        error: false
      };
    }
    /**
     * Refresh method
     * @param newLambda: number - new parameter "lambda"
     * This method does not return values
     */

  }, {
    key: "refresh",
    value: function refresh(newLambda) {
      this.lambda = Number(newLambda);
    }
    /**
     * Class .toString method
     * @returns {string}
     */

  }, {
    key: "toString",
    value: function toString() {
      var info = ['Exponential Distribution', "Usage: unirand.exponential(".concat(this.lambda, ").random()")];
      return info.join('\n');
    }
    /**
     * Mean value
     * Information only
     * For calculating real mean value use analyzer
     */

  }, {
    key: "mean",
    get: function get() {
      return 1 / this.lambda;
    }
    /**
     * Median value
     * Information only
     * For calculating real median value use analyzer
     */

  }, {
    key: "median",
    get: function get() {
      return Math.log(2) / this.lambda;
    }
    /**
     * Mode value - value, which appears most often
     * Information only
     * For calculating real mode value use analyzer
     */

  }, {
    key: "mode",
    get: function get() {
      return 0;
    }
    /**
     * Variance value
     * Information only
     * For calculating real variance value use analyzer
     */

  }, {
    key: "variance",
    get: function get() {
      return 1 / Math.pow(this.lambda, 2);
    }
    /**
     * Skewness value
     * Information only
     * For calculating real skewness value use analyzer
     */

  }, {
    key: "skewness",
    get: function get() {
      return 2;
    }
    /**
     * Kurtosis value
     * Information only
     * For calculating real kurtosis value use analyzer
     */

  }, {
    key: "kurtosis",
    get: function get() {
      return 6;
    }
    /**
     * Entropy value
     * Information only
     * For calculating real entropy value use analyzer
     */

  }, {
    key: "entropy",
    get: function get() {
      return 1 - Math.log(this.lambda);
    }
    /**
     * Fisher information matrix
     * Information only
     */

  }, {
    key: "fisher",
    get: function get() {
      return this.variance;
    }
    /**
     * All parameters of distribution in one object
     * Information only
     */

  }, {
    key: "parameters",
    get: function get() {
      return {
        mean: this.mean,
        median: this.median,
        mode: this.mode,
        variance: this.variance,
        skewness: this.skewness,
        entropy: this.entropy,
        fisher: this.fisher
      };
    }
  }]);

  return Exponential;
}();

module.exports = Exponential;