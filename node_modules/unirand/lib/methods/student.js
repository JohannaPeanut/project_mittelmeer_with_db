"use strict";

var _prngProxy = _interopRequireDefault(require("../prng/prngProxy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Student = /*#__PURE__*/function () {
  function Student(v) {
    _classCallCheck(this, Student);

    this.degrees = Number(v);
    this._b = Math.sqrt(2 / Math.sqrt(Math.E) - 1);
  }
  /**
   * Generates a random number
   * @returns a Student's t-distributed number
   */


  _createClass(Student, [{
    key: "random",
    value: function random() {
      _prngProxy["default"].random();

      var randomNumber = this._random(); // Limit result to get good distribution


      while (Math.abs(randomNumber) > 12) {
        randomNumber = this._random();
      }

      return randomNumber;
    }
    /**
     * Generates next seeded random number
     * @returns {number}
     */

  }, {
    key: "next",
    value: function next() {
      var randomNumber = this._random(); // Limit result to get good distribution


      while (Math.abs(randomNumber) > 12) {
        randomNumber = this._random();
      }

      return randomNumber;
    }
    /**
     * Generate Student t-value with TIR algorithm
     * @returns a Student's t-distributed number
     */
    // $FlowFixMe

  }, {
    key: "_random",
    value: function _random() {
      var u, v, x;
      /*eslint-disable no-constant-condition */

      while (true) {
        // --- step 1 ---
        u = _prngProxy["default"].next();

        if (u < this._b / 2) {
          //  --- step 2 ---
          v = _prngProxy["default"].next();
          x = 4 * u - this._b;

          if (v <= 1 - 0.5 * Math.abs(x)) {
            return x;
          }

          if (v <= this._u_alpha(this.degrees, x)) {
            return x;
          } // here go to step 1

        } else {
          // --- step 3 ---
          if (u < 0.5) {
            x = (Math.abs(4 * u - 1 - this._b) + this._b) * Math.sign(4 * u - 1 - this._b);
            v = _prngProxy["default"].next(); // --- step 4 ---

            if (v <= 1 - 0.5 * Math.abs(x)) {
              return x;
            }

            if (v >= (1 + Math.pow(this._b, 2)) / (1 + Math.pow(x, 2))) {
              continue;
            }

            if (v <= this._u_alpha(this.degrees, x)) {
              return x;
            }
          } else {
            if (u < 0.75) {
              // --- step 5 ---
              x = Math.sign(8 * u - 5) * 2 / (Math.abs(8 * u - 5) + 1);
              v = _prngProxy["default"].next() / Math.pow(x, 2); // --- step 4 ---

              if (v <= 1 - 0.5 * Math.abs(x)) {
                return x;
              }

              if (v >= (1 + Math.pow(this._b, 2)) / (1 + Math.pow(x, 2))) {
                continue;
              }

              if (v <= this._u_alpha(this.degrees, x)) {
                return x;
              }
            } else {
              // --- step 6 ---
              x = 2 / (8 * u - 7);
              v = _prngProxy["default"].next();

              if (v < Math.pow(x, 2) * this._u_alpha(this.degrees, x)) {
                return x;
              }
            }
          }
        }
      }
    }
    /**
     * u_alpha function
     */

  }, {
    key: "_u_alpha",
    value: function _u_alpha(alpha, x) {
      return Math.pow(1 + Math.pow(x, 2) / alpha, -0.5 * (alpha + 1));
    }
    /**
     * Generates Student's t-distributed numbers
     * @param n: number - Number of elements in resulting array, n > 0
     * @returns Array<number> - Student's t-distributed numbers
     */

  }, {
    key: "distribution",
    value: function distribution(n) {
      var studentArray = [];

      _prngProxy["default"].random();

      var randomNumber;

      for (var i = 0; i < n; i += 1) {
        randomNumber = this._random(); // Limit result to get good distribution

        while (randomNumber > 12) {
          randomNumber = this._random();
        }

        studentArray[i] = randomNumber;
      }

      return studentArray;
    }
    /**
     * Error handling
     * @returns {boolean}
     */

  }, {
    key: "isError",
    value: function isError() {
      if (!this.degrees) {
        return {
          error: 'Student\'s t-distribution: you should point "v" (degrees of freedom) numerical value'
        };
      }

      if (this.degrees < 0) {
        return {
          error: 'Student\'s t-distribution: parameter "v" (degrees of freedom) must be a positive value'
        };
      }

      return {
        error: false
      };
    }
    /**
     * Refresh method
     * @param newV: number - new parameter "v"
     * This method does not return values
     */

  }, {
    key: "refresh",
    value: function refresh(newV) {
      this.degrees = Number(newV);
    }
    /**
     * Class .toString method
     * @returns {string}
     */

  }, {
    key: "toString",
    value: function toString() {
      var info = ['Student\'s t-distribution', "Usage: unirand.student(".concat(this.degrees, ").random()")];
      return info.join('\n');
    }
    /**
     * Mean value
     * Information only
     * For calculating real mean value use analyzer
     */

  }, {
    key: "mean",
    get: function get() {
      if (this.degrees > 1) {
        return 0;
      }

      return undefined;
    }
    /**
     * Median value
     * Information only
     * For calculating real median value use analyzer
     */

  }, {
    key: "median",
    get: function get() {
      return 0;
    }
    /**
     * Mode value - value, which appears most often
     * Information only
     * For calculating real mode value use analyzer
     */

  }, {
    key: "mode",
    get: function get() {
      return 0;
    }
    /**
     * Variance value
     * Information only
     * For calculating real variance value use analyzer
     */

  }, {
    key: "variance",
    get: function get() {
      if (this.degrees > 2) {
        return this.degrees / (this.degrees - 2);
      } else if (this.degrees > 1 && this.degrees <= 2) {
        return Infinity;
      }

      return undefined;
    }
    /**
     * Skewness value
     * Information only
     * For calculating real skewness value use analyzer
     */

  }, {
    key: "skewness",
    get: function get() {
      if (this.degrees > 3) {
        return 0;
      }

      return undefined;
    }
    /**
     * Kurtosis value
     * Information only
     * For calculating real kurtosis value use analyzer
     */

  }, {
    key: "kurtosis",
    get: function get() {
      if (this.degrees > 4) {
        return 6 / (this.degrees - 4);
      } else if (this.degrees > 2 && this.degrees <= 4) {
        return Infinity;
      }

      return undefined;
    } // TODO: implement Beta function for entropy

    /**
     * All parameters of distribution in one object
     * Information only
     */

  }, {
    key: "parameters",
    get: function get() {
      return {
        mean: this.mean,
        median: this.median,
        mode: this.mode,
        variance: this.variance,
        skewness: this.skewness,
        kurtosis: this.kurtosis
      };
    }
  }]);

  return Student;
}(); // TODO: implement entropy formula after Beta-function implementation


module.exports = Student;