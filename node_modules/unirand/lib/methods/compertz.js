"use strict";

var _prngProxy = _interopRequireDefault(require("../prng/prngProxy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Compertz = /*#__PURE__*/function () {
  function Compertz(nu, b) {
    _classCallCheck(this, Compertz);

    this.nu = Number(nu);
    this.b = Number(b);
  }
  /**
   * Generates a random number
   * @returns a Compertz distributed number
   */


  _createClass(Compertz, [{
    key: "_random",
    value: function _random(u) {
      return Math.log(1 - Math.log(1 - u) / this.nu) / this.b;
    }
  }, {
    key: "random",
    value: function random() {
      return this._random(_prngProxy["default"].random());
    }
  }, {
    key: "next",
    value: function next() {
      return this._random(_prngProxy["default"].next());
    }
    /**
     * Generates Compertz distributed numbers
     * @param n: number - Number of elements in resulting array, n > 0
     * @returns Array<number> - Compertz distributed numbers
     */

  }, {
    key: "distribution",
    value: function distribution(n) {
      var compertzArray = [],
          random = _prngProxy["default"].random(n);

      for (var i = 0; i < n; i += 1) {
        compertzArray[i] = this._random(random[i]);
      }

      return compertzArray;
    }
    /**
     * Error handling
     * @returns {boolean}
     */

  }, {
    key: "isError",
    value: function isError() {
      if (!this.nu || this.nu <= 0) {
        return {
          error: 'Compertz distribution: you should point parameter "nu" (shape) with positive numerical value'
        };
      }

      if (!this.b || this.b <= 0) {
        return {
          error: 'Compertz distribution: you should point parameter "b" (scale) with positive numerical value'
        };
      }

      return {
        error: false
      };
    }
    /**
     * Refresh method
     * @param newNu: number - new parameter "bu"
     * @param newB: number - new parameter "b"
     * This method does not return values
     */

  }, {
    key: "refresh",
    value: function refresh(newNu, newB) {
      this.nu = Number(newNu);
      this.b = Number(newB);
    }
    /**
     * Class .toString method
     * @returns {string}
     */

  }, {
    key: "toString",
    value: function toString() {
      var info = ['Compertz Distribution', "Usage: unirand.compertz(".concat(this.nu, ", ").concat(this.b, ").random()")];
      return info.join('\n');
    }
    /**
     * Median value
     * Information only
     * For calculating real median value use analyzer
     */

  }, {
    key: "median",
    get: function get() {
      return this._random(0.5);
    }
    /**
     * All parameters of distribution in one object
     * Information only
     */

  }, {
    key: "parameters",
    get: function get() {
      return {
        median: this.median
      };
    }
  }]);

  return Compertz;
}();

module.exports = Compertz;