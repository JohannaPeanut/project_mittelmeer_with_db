"use strict";

var _prngProxy = _interopRequireDefault(require("../prng/prngProxy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Logistic = /*#__PURE__*/function () {
  function Logistic(mu, s) {
    _classCallCheck(this, Logistic);

    this.location = Number(mu);
    this.scale = Number(s);
  }
  /**
   * Generates a random number
   * @returns a Logistic distributed number
   */


  _createClass(Logistic, [{
    key: "random",
    value: function random() {
      var u = _prngProxy["default"].random();

      return this._random(u);
    }
    /**
     * Generates next seeded random number
     * @returns {number}
     */

  }, {
    key: "next",
    value: function next() {
      return this._random(_prngProxy["default"].next());
    }
  }, {
    key: "_random",
    value: function _random(u) {
      return this.location + this.scale * Math.log(u / (1 - u));
    }
    /**
     * Generates Logistic distributed numbers
     * @param n: number - Number of elements in resulting array, n > 0
     * @returns Array<number> - Logistic distributed numbers
     */

  }, {
    key: "distribution",
    value: function distribution(n) {
      var logisticArray = [],
          random = _prngProxy["default"].random(n);

      for (var i = 0; i < n; i += 1) {
        logisticArray[i] = this._random(random[i]);
      }

      return logisticArray;
    }
    /**
     * Error handling
     * @returns {boolean}
     */

  }, {
    key: "isError",
    value: function isError() {
      if (!this.location && this.location !== 0 || !this.scale) {
        return {
          error: 'Logistic distribution: you should point parameters "mu" and "s" (scale) with numerical values'
        };
      }

      if (this.scale <= 0) {
        return {
          error: 'Logistic distribution: parameter "s" (scale) must be a positive number'
        };
      }

      return {
        error: false
      };
    }
    /**
     * Refresh method
     * @param newMu: number - new parameter "mu"
     * @param newS: number - new parameter "sigma"
     * This method does not return values
     */

  }, {
    key: "refresh",
    value: function refresh(newMu, newS) {
      this.location = Number(newMu);
      this.scale = Number(newS);
    }
    /**
     * Class .toString method
     * @returns {string}
     */

  }, {
    key: "toString",
    value: function toString() {
      var info = ['Logistic Distribution', "Usage: unirand.logistic(".concat(this.location, ", ").concat(this.scale, ").random()")];
      return info.join('\n');
    }
    /**
     * Mean value
     * Information only
     * For calculating real mean value use analyzer
     */

  }, {
    key: "mean",
    get: function get() {
      return this.location;
    }
    /**
     * Median value
     * Information only
     * For calculating real median value use analyzer
     */

  }, {
    key: "median",
    get: function get() {
      return this.location;
    }
    /**
     * Mode value - value, which appears most often
     * Information only
     * For calculating real mode value use analyzer
     */

  }, {
    key: "mode",
    get: function get() {
      return this.location;
    }
    /**
     * Variance value
     * Information only
     * For calculating real variance value use analyzer
     */

  }, {
    key: "variance",
    get: function get() {
      return Math.pow(this.scale * Math.PI, 2) / 3;
    }
    /**
     * Kurtosis value
     * Information only
     * For calculating real kurtosis value use analyzer
     */

  }, {
    key: "kurtosis",
    get: function get() {
      return 1.2;
    }
    /**
     * Skewness value
     * Information only
     * For calculating real skewness value use analyzer
     */

  }, {
    key: "skewness",
    get: function get() {
      return 0;
    }
    /**
     * Entropy value
     * Information only
     * This formula esus Euler's number (base of natural logarithm)
     * For calculating real entropy value use analyzer
     */

  }, {
    key: "entropy",
    get: function get() {
      return Math.log(this.scale) + 2;
    }
    /**
     * All parameters of distribution in one object
     * Information only
     */

  }, {
    key: "parameters",
    get: function get() {
      return {
        mean: this.mean,
        median: this.median,
        mode: this.mode,
        variance: this.variance,
        skewness: this.skewness,
        entropy: this.entropy
      };
    }
  }]);

  return Logistic;
}();

module.exports = Logistic;