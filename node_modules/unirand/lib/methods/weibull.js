"use strict";

var _prngProxy = _interopRequireDefault(require("../prng/prngProxy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Utils = require('../utils/utils');

var Weibull = /*#__PURE__*/function () {
  function Weibull(k, lambda) {
    _classCallCheck(this, Weibull);

    this.k = Number(k);
    this.lambda = Number(lambda);
    this.gamma = Utils.gamma;
  }
  /**
   * Generates a random number
   * @returns a Weibull distributed number
   */


  _createClass(Weibull, [{
    key: "random",
    value: function random() {
      return this._random(_prngProxy["default"].random());
    }
    /**
     * Generates next seeded random number
     * @returns {number}
     */

  }, {
    key: "next",
    value: function next() {
      return this._random(_prngProxy["default"].next());
    }
    /**
     * For simplicity
     * @param {number} u
     * @private
     */

  }, {
    key: "_random",
    value: function _random(u) {
      return this.lambda * Math.pow(-Math.log(1 - u), 1 / this.k);
    }
    /**
     * Generates Weibull distributed numbers
     * @param n: number - Number of elements in resulting array, n > 0
     * @returns Array<number> - Weibull distributed numbers
     */

  }, {
    key: "distribution",
    value: function distribution(n) {
      var weibullArray = [],
          random = _prngProxy["default"].random(n);

      for (var i = 0; i < n; i += 1) {
        weibullArray[i] = this._random(random[i]);
      }

      return weibullArray;
    }
    /**
     * Error handling
     * @returns {boolean}
     */

  }, {
    key: "isError",
    value: function isError() {
      if (!this.k || !this.lambda) {
        return {
          error: 'Weibull distribution: you should point "k", "lambda" numerical values'
        };
      }

      if (this.k <= 0) {
        return {
          error: 'Weibull distribution: parameters "k" must greater then zero'
        };
      }

      if (this.lambda <= 0) {
        return {
          error: 'Weibull distribution: parameters "lambda" must be greater then zero'
        };
      }

      return {
        error: false
      };
    }
    /**
     * Refresh method
     * @param newK: number - new parameter "k"
     * @param newLambda: number - new parameter "lambda"
     * This method does not return values
     */

  }, {
    key: "refresh",
    value: function refresh(newK, newLambda) {
      this.k = Number(newK);
      this.lambda = Number(newLambda);
    }
    /**
     * Class .toString method
     * @returns {string}
     */

  }, {
    key: "toString",
    value: function toString() {
      var info = ['Weibull Distribution', "Usage: unirand.weibull(".concat(this.k, ", ").concat(this.lambda, ").random()")];
      return info.join('\n');
    }
    /**
     * Mean value
     * Information only
     * For calculating real mean value use analyzer
     */

  }, {
    key: "mean",
    get: function get() {
      return this.lambda * this.gamma(1 + 1 / this.k);
    }
    /**
     * Median value
     * Information only
     * For calculating real median value use analyzer
     */

  }, {
    key: "median",
    get: function get() {
      return this.lambda * Math.pow(Math.log(2), 1 / this.k);
    }
    /**
     * Mode value - value, which appears most often
     * Information only
     * For calculating real mode value use analyzer
     */

  }, {
    key: "mode",
    get: function get() {
      if (this.k > 1) {
        return this.lambda * Math.pow((this.k - 1) / this.k, 1 / this.k);
      } else {
        return 0;
      }
    }
    /**
     * Variance value
     * Information only
     * For calculating real variance value use analyzer
     */

  }, {
    key: "variance",
    get: function get() {
      return Math.pow(this.lambda, 2) * (this.gamma(1 + 2 / this.k) - Math.pow(this.gamma(1 + 1 / this.k), 2));
    }
    /**
     * Entropy value
     * Information only
     * For calculating real entropy value use analyzer
     */

  }, {
    key: "entropy",
    get: function get() {
      return 0.5772156649015328606065121 * (1 - 1 / this.k) + Math.log(this.lambda / this.k) + 1;
    }
    /**
     * Skewness value
     * Information only
     */

  }, {
    key: "skewness",
    get: function get() {
      return (this.gamma(1 + 3 / this.k) * Math.pow(this.lambda, 3) - 3 * this.mean * this.variance - Math.pow(this.mean, 3)) / Math.pow(this.variance, 1.5);
    }
    /**
     * Kurtosis value
     * Information only
     */

  }, {
    key: "kurtosis",
    get: function get() {
      return -3 + (Math.pow(this.lambda, 4) * this.gamma(1 + 4 / this.k) - 4 * this.skewness * Math.pow(this.variance, 1.5) * this.mean - 6 * Math.pow(this.mean, 2) * this.variance - Math.pow(this.mean, 4)) / Math.pow(this.variance, 2);
    }
    /**
     * All parameters of distribution in one object
     * Information only
     */

  }, {
    key: "parameters",
    get: function get() {
      return {
        mean: this.mean,
        median: this.median,
        mode: this.mode,
        variance: this.variance,
        entropy: this.entropy,
        skewness: this.skewness,
        kurtosis: this.kurtosis
      };
    }
  }]);

  return Weibull;
}();

module.exports = Weibull;