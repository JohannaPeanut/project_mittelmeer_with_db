"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Delaporte Distribution
 * This is discrete distribution
 * https://en.wikipedia.org/wiki/Delaporte_distribution
 * @param alpha: number - alpha > 0
 * @param beta: number - beta > 0
 * @param lambda: number - lambda > 0
 * @returns Delaporte Distributed value
 * Created by Alexey S. Kiselev
 */
var Gamma = require('./gamma');

var Poisson = require('./poisson');

var Delaporte = /*#__PURE__*/function () {
  function Delaporte(alpha, beta, lambda) {
    _classCallCheck(this, Delaporte);

    this.alpha = Number(alpha);
    this.beta = Number(beta);
    this.lambda = Number(lambda);
    this.gamma = new Gamma(this.alpha, this.beta);
    this.poisson = new Poisson(this.lambda + this.gamma.random());
  }
  /**
   * Generates a random number
   * @returns {number} a Delaporte distributed number
   */


  _createClass(Delaporte, [{
    key: "random",
    value: function random() {
      this.gamma.refresh(this.alpha, this.beta);
      var tempRandom = this.gamma.random();
      this.poisson.refresh(this.lambda + tempRandom);
      return this.poisson.random();
    }
    /**
     * Generates next seeded random number
     * @returns {number} a Delaporte distributed number
     */

  }, {
    key: "next",
    value: function next() {
      this.gamma.refresh(this.alpha, this.beta);
      var tempRandom = this.gamma.next();
      this.poisson.refresh(this.lambda + tempRandom);
      return this.poisson.next();
    }
    /**
     * Generates Delaporte distributed numbers
     * @param n: number - Number of elements in resulting array, n > 0
     * @returns Array<number> - Delaporte distributed numbers
     */

  }, {
    key: "distribution",
    value: function distribution(n) {
      this.gamma.refresh(this.alpha, this.beta);
      var delaporteArray = [],
          random = this.gamma.distribution(n);

      for (var i = 0; i < n; i += 1) {
        this.poisson.refresh(this.lambda + random[i]);
        delaporteArray[i] = this.poisson.next();
      }

      return delaporteArray;
    }
    /**
     * Error handling
     * @returns {boolean}
     */

  }, {
    key: "isError",
    value: function isError() {
      if (!this.alpha || !this.beta || !this.lambda) {
        return {
          error: 'Delaporte distribution: you should point parameters "alpha", "beta" and "lambda" as numerical values'
        };
      }

      if (this.alpha <= 0 || this.beta <= 0 || this.lambda <= 0) {
        return {
          error: 'Delaporte distribution: parameters "alpha", "beta" and "lambda" must be a positive numbers'
        };
      }

      return {
        error: false
      };
    }
    /**
     * Refresh method
     * @param newAlpha: number - new parameter "alpha"
     * @param newBeta: number - new parameter "beta"
     * @param newLambda: number - new parameter "lambda"
     * This method does not return values
     */

  }, {
    key: "refresh",
    value: function refresh(newAlpha, newBeta, newLambda) {
      this.alpha = Number(newAlpha);
      this.beta = Number(newBeta);
      this.lambda = Number(newLambda);
    }
    /**
     * Class .toString method
     * @returns {string}
     */

  }, {
    key: "toString",
    value: function toString() {
      var info = ['Delaporte Distribution', "Usage: unirand.delaporte(".concat(this.alpha, ", ").concat(this.beta, ", ").concat(this.lambda, ").random()")];
      return info.join('\n');
    }
    /**
     * Mean value
     * Information only
     * For calculating real mean value use analyzer
     */

  }, {
    key: "mean",
    get: function get() {
      return this.lambda + this.alpha / this.beta;
    }
    /**
     * Variance value
     * Information only
     * For calculating real variance value use analyzer
     */

  }, {
    key: "variance",
    get: function get() {
      return this.mean + this.alpha / (this.beta * this.beta);
    }
    /**
     * Skewness value
     * Information only
     * For calculating real skewness value use analyzer
     */

  }, {
    key: "skewness",
    get: function get() {
      return (this.lambda + this.alpha * (1 + 3 / this.beta + 2 / (this.beta * this.beta)) / this.beta) / Math.pow(this.variance, 1.5);
    }
    /**
     * Kurtosis value
     * Information only
     * For calculating real kurtosis value use analyzer
     */

  }, {
    key: "kurtosis",
    get: function get() {
      return (this.lambda + 3 * this.lambda * this.lambda + this.alpha * (1 + 6 * this.lambda + 6 * this.lambda / this.beta + 7 / this.beta + 12 / (this.beta * this.beta) + 6 / Math.pow(this.beta, 3) + 3 * this.alpha / this.beta + 6 * this.alpha / Math.pow(this.beta, 2) + 3 * this.alpha / Math.pow(this.beta, 3)) / this.beta) / Math.pow(this.variance, 2);
    }
    /**
     * All parameters of distribution in one object
     * Information only
     */

  }, {
    key: "parameters",
    get: function get() {
      return {
        mean: this.mean,
        variance: this.variance,
        skewness: this.skewness,
        kurtosis: this.kurtosis
      };
    }
  }]);

  return Delaporte;
}();

module.exports = Delaporte;