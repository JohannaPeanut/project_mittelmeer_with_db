"use strict";

var _prngProxy = _interopRequireDefault(require("../prng/prngProxy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Uniform = /*#__PURE__*/function () {
  function Uniform() {
    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    _classCallCheck(this, Uniform);

    this.min = Math.min(min, max);
    this.max = Math.max(min, max);
  }
  /**
   * Generates a random number
   * Uses core Math.random() method but with [min, max] range
   */


  _createClass(Uniform, [{
    key: "random",
    value: function random() {
      return this._random(_prngProxy["default"].random());
    }
    /**
     * Generates next seeded random number
     * @returns {number}
     */

  }, {
    key: "next",
    value: function next() {
      return this._random(_prngProxy["default"].next());
    }
  }, {
    key: "_random",
    value: function _random(u) {
      return this.min + u * (this.max - this.min);
    }
    /**
     * Generates an array of uniformly distributed numbers
     * @param n: number - number of elements in resulting array
     */

  }, {
    key: "distribution",
    value: function distribution(n) {
      var uniformArray = [],
          random = _prngProxy["default"].random(n);

      for (var i = 0; i < n; i += 1) {
        uniformArray[i] = this._random(random[i]);
      }

      return uniformArray;
    }
    /**
     * Error handling
     * Check if min === max then throw Error
     * @returns {boolean}
     */

  }, {
    key: "isError",
    value: function isError() {
      if (!this.min && this.min !== 0 || !this.max && this.max !== 0) {
        return {
          error: 'Uniform distribution: you should point "min" and "max" numerical values'
        };
      }

      if (this.min === this.max) {
        return {
          error: 'Uniform distribution: min and max values can\'t be the same'
        };
      }

      return {
        error: false
      };
    }
    /**
     * Refresh method
     * @param newMin
     * @param newMax
     */

  }, {
    key: "refresh",
    value: function refresh() {
      var newMin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var newMax = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      this.min = Math.min(newMin, newMax);
      this.max = Math.max(newMin, newMax);
    }
    /**
     * toString() method
     * Show the description of this distribution
     * @returns {string}
     */

  }, {
    key: "toString",
    value: function toString() {
      var info = ['Continuous Uniform Distribution', "Usage: unirand.uniform(".concat(this.min, ", ").concat(this.max, ").random()")];
      return info.join('\n');
    }
    /**
     * Mean value of this distribution
     * Information only
     * For calculating real mean value use analyzer
     */

  }, {
    key: "mean",
    get: function get() {
      return (this.min + this.max) / 2;
    }
    /**
     * Median value
     * Information only
     * For calculating real median value use analyzer
     */

  }, {
    key: "median",
    get: function get() {
      return (this.min + this.max) / 2;
    }
    /**
     * Variance value
     * Information only
     * For calculating real variance value use analyzer
     */

  }, {
    key: "variance",
    get: function get() {
      return Math.pow(this.max - this.min, 2) / 12;
    }
    /**
     * Skewness value
     * Information only
     */

  }, {
    key: "skewness",
    get: function get() {
      return 0;
    }
    /**
     * Entropy value
     * Information only
     */

  }, {
    key: "entropy",
    get: function get() {
      return Math.log(this.max - this.min);
    }
    /**
     * Kurtosis value
     * Information only
     */

  }, {
    key: "kurtosis",
    get: function get() {
      return -6 / 5;
    }
    /**
     * All parameters of distribution in one object
     * Information only
     */

  }, {
    key: "parameters",
    get: function get() {
      return {
        mean: this.mean,
        median: this.median,
        variance: this.variance,
        skewness: this.skewness,
        entropy: this.entropy,
        kurtosis: this.kurtosis
      };
    }
  }]);

  return Uniform;
}();

module.exports = Uniform;