"use strict";

var _prngProxy = _interopRequireDefault(require("../prng/prngProxy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Utils = require('../utils/utils');

var Gamma = /*#__PURE__*/function () {
  function Gamma(alpha, beta) {
    _classCallCheck(this, Gamma);

    this.alpha = Number(alpha);
    this.beta = Number(beta);
  }
  /**
   * Generates a random number
   * @returns a Gamma distributed number
   */


  _createClass(Gamma, [{
    key: "random",
    value: function random() {
      var temp = 0,
          random = _prngProxy["default"].random(this.alpha);

      for (var i = 0; i < this.alpha; i += 1) {
        temp -= Math.log(random[i]) / this.beta;
      }

      return temp;
    }
    /**
     * Generates next seeded random number
     * @returns {number}
     */

  }, {
    key: "next",
    value: function next() {
      var temp = 0;

      for (var i = 0; i < this.alpha; i += 1) {
        temp -= Math.log(_prngProxy["default"].next()) / this.beta;
      }

      return temp;
    }
    /**
     * Generates gamma distributed numbers
     * @param n: number - Number of elements in resulting array, n > 0
     * @returns Array<number> - gamma distributed numbers
     */

  }, {
    key: "distribution",
    value: function distribution(n) {
      var gammaArray = [];

      var random = _prngProxy["default"].random(n * this.alpha);

      var temp;

      for (var i = 0; i < n; i += 1) {
        temp = 0;

        for (var j = 0; j < this.alpha; j += 1) {
          temp -= Math.log(random[i * this.alpha + j]) / this.beta;
        }

        gammaArray[i] = temp;
      }

      return gammaArray;
    }
    /**
     * Error handling
     * Parameter "alpha" must be integer and alpha > 0
     * Parameter "beta" must be positive, beta > 0
     * @returns {boolean}
     */

  }, {
    key: "isError",
    value: function isError() {
      if (!this.alpha || !this.beta) {
        return {
          error: 'Gamma distribution: you should point parameters "alpha" and "beta" like a positive numerical values'
        };
      }

      if (this.alpha <= 0) {
        return {
          error: 'Gamma distribution: parameter "alpha" must be a positive number'
        };
      }

      if (this.beta <= 0) {
        return {
          error: 'Gamma distribution: parameter "beta" must be a positive integer'
        };
      }

      return {
        error: false
      };
    }
    /**
     * Refresh method
     * @param newAlpha: number - new parameter "alpha"
     * @param newBeta: number - new parameter "beta"
     * This method does not return values
     */

  }, {
    key: "refresh",
    value: function refresh(newAlpha, newBeta) {
      this.alpha = Number(newAlpha);
      this.beta = Number(newBeta);
    }
    /**
     * Class .toString method
     * @returns {string}
     */

  }, {
    key: "toString",
    value: function toString() {
      var info = ['Gamma Distribution', "Usage: unirand.gamma(".concat(this.alpha, ", ").concat(this.beta, ").random()")];
      return info.join('\n');
    }
    /**
     * Mean value
     * Information only
     * For calculating real mean value use analyzer
     */

  }, {
    key: "mean",
    get: function get() {
      return this.alpha / this.beta;
    }
    /**
     * Median value of Gamma distribution does not have simple closed form
     */

    /**
     * Mode value - value, which appears most often
     * Information only
     * For calculating real mode value use analyzer
     */

  }, {
    key: "mode",
    get: function get() {
      return (this.alpha - 1) / this.beta;
    }
    /**
     * Variance value
     * Information only
     * For calculating real variance value use analyzer
     */

  }, {
    key: "variance",
    get: function get() {
      return this.alpha / Math.pow(this.beta, 2);
    }
    /**
     * Skewness value
     * Information only
     * For calculating real skewness value use analyzer
     */

  }, {
    key: "skewness",
    get: function get() {
      return 2 / Math.sqrt(this.alpha);
    }
    /**
     * Kurtosis value
     * Information only
     * For calculating real Kurtosis value use analyzer
     */

  }, {
    key: "kurtosis",
    get: function get() {
      return 6 / this.alpha;
    }
    /**
     * Entropy value
     * Information only
     * For calculating real entropy value use analyzer
     */

  }, {
    key: "entropy",
    get: function get() {
      return this.alpha - Math.log(this.beta) + Math.log(Utils.gamma(this.alpha)) + (1 - this.alpha) * Utils.digamma(this.alpha);
    }
    /**
     * All parameters of distribution in one object
     * Information only
     */

  }, {
    key: "parameters",
    get: function get() {
      return {
        mean: this.mean,
        mode: this.mode,
        variance: this.variance,
        skewness: this.skewness,
        entropy: this.entropy,
        kurtosis: this.kurtosis
      };
    }
  }]);

  return Gamma;
}();

module.exports = Gamma;