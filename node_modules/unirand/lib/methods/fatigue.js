"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Fatigue life Distribution, also known as Birnbaumâ€“Saunders distribution
 * Continuous distribution
 * https://en.wikipedia.org/wiki/Birnbaum-Saunders_distribution
 * @param alpha: number - shape parameter, alpha > 0
 * @param beta: number - scale parameter, beta > 0
 * @returns Fatigue Distributed value
 * Created by Alexey S. Kiselev
 */
var Normal = require('./normal');

var Fatigue = /*#__PURE__*/function () {
  function Fatigue(alpha, beta) {
    _classCallCheck(this, Fatigue);

    this.alpha = Number(alpha);
    this.beta = Number(beta);
    this.normal = new Normal(0, 1);
  }

  _createClass(Fatigue, [{
    key: "_random",
    value: function _random(norm) {
      return this.beta * Math.pow(this.alpha * norm + Math.sqrt(Math.pow(this.alpha * norm, 2) + 4), 2) / 4;
    }
    /**
     * Generates a random number
     * @returns {number} a Fatigue distributed number
     */

  }, {
    key: "random",
    value: function random() {
      return this._random(this.normal.random());
    }
    /**
     * Generates next seeded random number
     * @returns {number} a Fatigue distributed number
     */

  }, {
    key: "next",
    value: function next() {
      return this._random(this.normal.next());
    }
    /**
     * Generates Fatigue distributed numbers
     * @param n: number - Number of elements in resulting array, n > 0
     * @returns Array<number> - Fatigue distributed numbers
     */

  }, {
    key: "distribution",
    value: function distribution(n) {
      var fatigueArray = [],
          random = this.normal.distribution(n);

      for (var i = 0; i < n; i += 1) {
        fatigueArray[i] = this._random(random[i]);
      }

      return fatigueArray;
    }
    /**
     * Error handling
     * @returns {boolean}
     */

  }, {
    key: "isError",
    value: function isError() {
      if (!this.alpha || !this.beta) {
        return {
          error: 'Fatigue distribution: you should point parameters "alpha" and "beta" as numerical values'
        };
      }

      if (this.alpha <= 0 || this.beta <= 0) {
        return {
          error: 'Fatigue distribution: parameters "alpha" and "beta" must be a positive numbers'
        };
      }

      return {
        error: false
      };
    }
    /**
     * Refresh method
     * @param newAlpha: number - new parameter "alpha"
     * @param newBeta: number - new parameter "beta"
     * This method does not return values
     */

  }, {
    key: "refresh",
    value: function refresh(newAlpha, newBeta) {
      this.alpha = Number(newAlpha);
      this.beta = Number(newBeta);
    }
    /**
     * Class .toString method
     * @returns {string}
     */

  }, {
    key: "toString",
    value: function toString() {
      var info = ['Fatigue Distribution', "Usage: unirand.fatigue(".concat(this.alpha, ", ").concat(this.beta, ").random()")];
      return info.join('\n');
    }
    /**
     * Mean value
     * Information only
     * For calculating real mean value use analyzer
     */

  }, {
    key: "mean",
    get: function get() {
      return this.beta * (Math.pow(this.alpha, 2) + 2) / 2;
    }
    /**
     * Median value
     * Information only
     * For calculating real mean value use analyzer
     */

  }, {
    key: "median",
    get: function get() {
      return this.beta;
    }
    /**
     * Variance value
     * Information only
     * For calculating real variance value use analyzer
     */

  }, {
    key: "variance",
    get: function get() {
      return Math.pow(this.alpha * this.beta, 2) * (5 * Math.pow(this.alpha, 2) + 4) / 4;
    }
    /**
     * Skewness value
     * Information only
     * For calculating real skewness value use analyzer
     */

  }, {
    key: "skewness",
    get: function get() {
      return 4 * this.alpha * (11 * Math.pow(this.alpha, 2) + 6) / Math.pow(5 * this.alpha * this.alpha + 4, 1.5);
    }
    /**
     * Kurtosis value
     * Information only
     * For calculating real kurtosis value use analyzer
     */

  }, {
    key: "kurtosis",
    get: function get() {
      return 3 + Math.pow(this.alpha, 2) * (558 * this.alpha * this.alpha + 240) / Math.pow(5 * this.alpha * this.alpha + 4, 2);
    }
    /**
     * All parameters of distribution in one object
     * Information only
     */

  }, {
    key: "parameters",
    get: function get() {
      return {
        mean: this.mean,
        median: this.median,
        variance: this.variance,
        skewness: this.skewness,
        kurtosis: this.kurtosis
      };
    }
  }]);

  return Fatigue;
}();

module.exports = Fatigue;