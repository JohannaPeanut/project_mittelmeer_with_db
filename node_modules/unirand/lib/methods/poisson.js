"use strict";

var _prngProxy = _interopRequireDefault(require("../prng/prngProxy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Poisson = /*#__PURE__*/function () {
  function Poisson(lambda) {
    _classCallCheck(this, Poisson);

    this.lambda = Number(lambda);
  }
  /**
   * Generates a random number
   * @returns a Poisson distributed number
   */


  _createClass(Poisson, [{
    key: "random",
    value: function random() {
      _prngProxy["default"].random();

      return this._random();
    }
    /**
     * Generates next seeded random number
     * @returns {number}
     */

  }, {
    key: "next",
    value: function next() {
      return this._random();
    }
  }, {
    key: "_random",
    value: function _random() {
      var res = 0,
          p = 1,
          L = Math.exp(-this.lambda);

      do {
        p *= _prngProxy["default"].next();
        res += 1;
      } while (p >= L);

      return res - 1;
    }
    /**
     * Generates Poisson distributed numbers
     * @param n: number - Number of elements in resulting array, n > 0
     * @returns Array<number> - Poisson distributed numbers
     */

  }, {
    key: "distribution",
    value: function distribution(n) {
      var poissonArray = [];

      _prngProxy["default"].random();

      for (var i = 0; i < n; i += 1) {
        poissonArray[i] = this._random();
      }

      return poissonArray;
    }
    /**
     * Error handling
     * Parameter "lambda" must be positive integer
     * @returns {boolean}
     */

  }, {
    key: "isError",
    value: function isError() {
      if (!this.lambda) {
        return {
          error: 'Poisson distribution: you should point parameter "lambda" with numerical value'
        };
      }

      if (this.lambda <= 0) {
        return {
          error: 'Poisson distribution: parameter "lambda" must be positive integer'
        };
      }

      return {
        error: false
      };
    }
    /**
     * Refresh method
     * @param newLambda: number - new parameter "lambda"
     * This method does not return values
     */

  }, {
    key: "refresh",
    value: function refresh(newLambda) {
      this.lambda = Number(newLambda);
    }
    /**
     * Class .toString method
     * @returns {string}
     */

  }, {
    key: "toString",
    value: function toString() {
      var info = ['Poisson Distribution', "Usage: unirand.poisson(".concat(this.lambda, ").random()")];
      return info.join('\n');
    }
    /**
     * Mean value
     * Information only
     * For calculating real mean value use analyzer
     */

  }, {
    key: "mean",
    get: function get() {
      return this.lambda;
    }
    /**
     * Median (approximate value)
     * Information only
     * For calculating real median value use analyzer
     */

  }, {
    key: "median",
    get: function get() {
      return Math.floor(this.lambda + 0.33333333 - 0.02 * this.lambda);
    }
    /**
     * There are no exact Mode value
     */

    /**
     * Variance value
     * Information only
     * For calculating real variance value use analyzer
     */

  }, {
    key: "variance",
    get: function get() {
      return this.lambda;
    }
    /**
     * Skewness value
     * Information only
     * For calculating real skewness value use analyzer
     */

  }, {
    key: "skewness",
    get: function get() {
      return 1 / Math.sqrt(this.lambda);
    }
    /**
     * Kurtosis value
     * Information only
     * For calculating real kurtosis value use analyzer
     */

  }, {
    key: "kurtosis",
    get: function get() {
      return 1 / this.lambda;
    }
    /**
     * Fisher information
     * Information only
     * For calculating real fisher information value use analyzer
     */

  }, {
    key: "fisher",
    get: function get() {
      return 1 / this.lambda;
    }
    /**
     * Entropy value (result agrees with C. Knessl, “Integral representations and asymptotic
     * expansions for Shannon and Renyi entropies,”)
     * Information only
     * For calculating real value use analyzer
     */

  }, {
    key: "entropy",
    get: function get() {
      return 0.5 * Math.log(2 * Math.PI * this.lambda) + 0.5 - 1 / (12 * this.lambda) - 1 / (24 * Math.pow(this.lambda, 2));
    }
    /**
     * All parameters of distribution in one object
     * Information only
     */

  }, {
    key: "parameters",
    get: function get() {
      return {
        mean: this.mean,
        median: this.median,
        variance: this.variance,
        skewness: this.skewness,
        fisher: this.fisher,
        kurtosis: this.kurtosis,
        entropy: this.entropy
      };
    }
  }]);

  return Poisson;
}();

module.exports = Poisson;