"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.DEFAULT_GENERATOR = exports.PRNGProxy = void 0;

var _BasicPRNG = _interopRequireDefault(require("./BasicPRNG"));

var _TucheiPRNG = _interopRequireDefault(require("./TucheiPRNG"));

var _DefaultPRNG = _interopRequireDefault(require("./DefaultPRNG"));

var _XorshiftPRNG = _interopRequireDefault(require("./XorshiftPRNG"));

var _KissPRNG = _interopRequireDefault(require("./KissPRNG"));

var _ParkMillerPRNG = _interopRequireDefault(require("./ParkMillerPRNG"));

var _CoveyouPRNG = _interopRequireDefault(require("./CoveyouPRNG"));

var _Knuthran2PRNG = _interopRequireDefault(require("./Knuthran2PRNG"));

var _R250PRNG = _interopRequireDefault(require("./R250PRNG"));

var _Mrg5PRNG = _interopRequireDefault(require("./Mrg5PRNG"));

var _Gfsr4PRNG = _interopRequireDefault(require("./Gfsr4PRNG"));

var _Dx1597PRNG = _interopRequireDefault(require("./Dx1597PRNG"));

var _Tt800PRNG = _interopRequireDefault(require("./Tt800PRNG"));

var _XorwowPRNG = _interopRequireDefault(require("./XorwowPRNG"));

var _MarsenneTwisterPRNG = _interopRequireDefault(require("./MarsenneTwisterPRNG"));

var _PhiloxPRNG = _interopRequireDefault(require("./PhiloxPRNG"));

var _Taus113PRNG = _interopRequireDefault(require("./Taus113PRNG"));

var _Swb2712PRNG = _interopRequireDefault(require("./Swb2712PRNG"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DEFAULT_GENERATOR = 'taus113';
exports.DEFAULT_GENERATOR = DEFAULT_GENERATOR;

var PRNGProxy = /*#__PURE__*/function () {
  function PRNGProxy() {
    _classCallCheck(this, PRNGProxy);

    this._modulo = _BasicPRNG["default"].modulo;
    this._seed = undefined;
    /*
    On machine: Ubuntu 18.04 x64, Intel® Core™ i7-6600U CPU @ 2.60GHz × 4
    Tested on 400M .next() operations
    default: 4712 ms, 85M per sec
    tuchei: 1550 ms, 258M per sec
    xorshift: 1538 ms, 260M per sec
    kiss: 3616 ms, 110M per sec
    parkmiller: 6814 ms, 58M per sec
    coveyou: 238704 ms, 1.7M per sec
    knuthran2: 117532 ms, 3.4M per sec
    r250: 1575 ms, 254M per sec
    mrg5: 112347 ms, 3.6M per sec
    gfsr4: 2890 ms, 138M per sec
    dx1597: 50161ms, 8M per sec
    tt800: 10434 ms, 38M per sec
    xorwow: 3093 ms, 130M per sec
    mt19937: 6250 ms, 64M per sec
    philox: 36008 ms, 11.1M per sec
    taus113: 1290ms, 310M per sec
    swb2712: 3520ms, 113M per sec
     */

    this._allowed_generators = {
      'default': _DefaultPRNG["default"],
      'tuchei': _TucheiPRNG["default"],
      'xorshift': _XorshiftPRNG["default"],
      'kiss': _KissPRNG["default"],
      'parkmiller': _ParkMillerPRNG["default"],
      'coveyou': _CoveyouPRNG["default"],
      'knuthran2': _Knuthran2PRNG["default"],
      'r250': _R250PRNG["default"],
      'mrg5': _Mrg5PRNG["default"],
      'gfsr4': _Gfsr4PRNG["default"],
      'dx1597': _Dx1597PRNG["default"],
      'tt800': _Tt800PRNG["default"],
      'xorwow': _XorwowPRNG["default"],
      'mt19937': _MarsenneTwisterPRNG["default"],
      'philox': _PhiloxPRNG["default"],
      'taus113': _Taus113PRNG["default"],
      'swb2712': _Swb2712PRNG["default"]
    };
    this._generators = {
      'default': new _DefaultPRNG["default"]()
    };
    this._current_generator_name = 'default';
    this._current_generator = this._generators['default'];
  }
  /**
   * A list of allowed generators
   * @returns {Array<string>} a list of generators
   */


  _createClass(PRNGProxy, [{
    key: "random",

    /**
     * Random method
     * @returns random number in range [0, 1)
     */
    value: function random() {
      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return this._current_generator.random(n);
    }
    /**
     * Next method
     * @returns {number} only single random value
     */

  }, {
    key: "next",
    value: function next() {
      return this._current_generator.next();
    }
  }, {
    key: "nextInt",
    value: function nextInt() {
      return this._current_generator.nextInt();
    }
    /**
     * Returns random integer [0, 2^32)
     * @returns {number}
     */

  }, {
    key: "randomInt",
    value: function randomInt() {
      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return this._current_generator.randomInt(n);
    }
    /**
     * Seed for reproducible results
     * If seed does not passed - assign random seed
     * @param {NumberString} seed_value
     */

  }, {
    key: "seed",
    value: function seed(seed_value) {
      if (typeof seed_value === 'number' && seed_value < 0) {
        seed_value += this._modulo - 1;
      }

      this._seed = seed_value;

      this._current_generator.seed(this._seed);
    }
    /**
     * Sets PRNG generator
     * @param {string} prng_name: name of generator on initialization
     */

  }, {
    key: "set_prng",
    value: function set_prng() {
      var prng_name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

      if (!this._allowed_generators[prng_name]) {
        throw new Error("PRNG ".concat(prng_name, " is not allowed"));
      } // if current generator is the same - do nothing


      if (this._current_generator_name === prng_name) {
        return;
      }

      if (!this._generators[prng_name]) {
        this._generators[prng_name] = new this._allowed_generators[prng_name]();
      }

      this._current_generator_name = prng_name;
      this._current_generator = this._generators[prng_name];

      this._current_generator.seed(this._seed);
    }
  }, {
    key: "generators",
    get: function get() {
      return Object.keys(this._allowed_generators);
    }
    /**
     * Current PRNG name
     * @returns {string} name of current PRNG
     */

  }, {
    key: "prng_name",
    get: function get() {
      return this._current_generator_name;
    }
  }]);

  return PRNGProxy;
}();

exports.PRNGProxy = PRNGProxy;
var prng_proxy = new PRNGProxy();

var prng = function prng() {
  var prng_name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
  prng_proxy.set_prng(prng_name);
  return prng_proxy;
};

var _default = prng(DEFAULT_GENERATOR);

exports["default"] = _default;