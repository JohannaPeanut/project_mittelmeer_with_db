"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _BasicPRNG2 = _interopRequireDefault(require("./BasicPRNG"));

var _TucheiPRNG = _interopRequireDefault(require("./TucheiPRNG"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LAG_R = 27;
var LAG_S = 12;
var RECALCULATE_FREQ = 65536; // 2 ^ 16

var Swb2712PRNG = /*#__PURE__*/function (_BasicPRNG) {
  _inherits(Swb2712PRNG, _BasicPRNG);

  var _super = _createSuper(Swb2712PRNG);

  // state after setting seed
  function Swb2712PRNG() {
    var _this;

    _classCallCheck(this, Swb2712PRNG);

    _this = _super.call(this);
    _this._no_seed = true;
    _this._state = {};
    _this._localPrng = new _TucheiPRNG["default"]();
    _this._words = [];
    _this._M = 0xFFFFFFFF;
    _this._recalculate_counter = 0;
    _this._pointersS = _this._generate_shifted_pointers(LAG_S);

    _this._initialize();

    _this._set_random_seed();

    return _this;
  }
  /**
   * Indicate whether seed is set up
   * @private
   * @override
   */


  _createClass(Swb2712PRNG, [{
    key: "_has_no_seed",
    value: function _has_no_seed() {
      return this._no_seed;
    }
    /**
     * Initializes initial values and sets state for calculating random number
     * @private
     * @override
     */

  }, {
    key: "_initialize",
    value: function _initialize() {
      var pointer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      this._localPrng.seed(this._seed);

      for (var i = 0; i < LAG_R; i += 1) {
        this._words[i] = Math.floor(this._localPrng.next() * this._M);
      }

      this._pointer = pointer;
      this._c = 0;
    }
    /**
     * Sets state for random number generating
     * @param {number} pointer
     * @param {Array<number>} words
     * @private
     */

  }, {
    key: "_setState",
    value: function _setState(pointer, words, c) {
      this._state._pointer = pointer;
      this._state._words = words.slice();
      this._state._c = c;
    }
    /**
     * Gets values from state
     * @private
     * @override
     */

  }, {
    key: "_get_from_state",
    value: function _get_from_state() {
      this._pointer = this._state._pointer;
      this._words = this._state._words.slice();
      this._c = this._state._c;
    }
    /**
     * Prepare initial values for calculating random value
     * @private
     * @override
     */

  }, {
    key: "_prepare_initial",
    value: function _prepare_initial() {
      if (this._no_seed === true) {
        this._set_random_seed();
      } else {
        this._get_from_state();
      }
    }
    /**
     * Creates random seed
     * @private
     * @override
     */

  }, {
    key: "_set_random_seed",
    value: function _set_random_seed() {
      this._seed = _BasicPRNG2["default"].random_seed();

      if (this._recalculate_counter === 0) {
        this._initialize(this._seed % LAG_R);
      }

      this._recalculate_counter += 1;

      if (this._recalculate_counter === RECALCULATE_FREQ) {
        this._recalculate_counter = 0;
      }
    }
    /**
     * @override
     * @param {?NumberString} seed_value
     */

  }, {
    key: "seed",
    value: function seed(seed_value) {
      if (seed_value === undefined || seed_value === null) {
        this._no_seed = true;

        this._set_random_seed();
      } else if (typeof seed_value === 'number') {
        this._seed = Math.floor(seed_value);
        this._pointer = this._seed % LAG_R;

        this._initialize(this._pointer);

        this._setState(this._pointer, this._words, this._c);

        this._no_seed = false;
      } else if (typeof seed_value === 'string') {
        this._seed = seed_value;
        this._pointer = 0;

        for (var i = 0; i < this._seed.length; i += 1) {
          this._pointer = (this._pointer + this._seed.charCodeAt(i)) % LAG_R;
        }

        this._initialize(this._pointer);

        this._setState(this._pointer, this._words, this._c);

        this._no_seed = false;
      } else {
        this._no_seed = true;

        this._set_random_seed();

        throw new Error('You should point seed with types: "undefined", "number" or "string"');
      }
    }
    /**
     * @override
     * @returns {number}
     * @private
     */

  }, {
    key: "_nextInt",
    value: function _nextInt() {
      var res = (this._words[this._pointersS[this._pointer]] - this._words[this._pointer] - this._c) % this._M;
      this._words[this._pointer] = res;
      this._pointer += 1;

      if (this._pointer >= LAG_R) {
        this._pointer = this._pointer - LAG_R;
      }

      if (res < 0) {
        this._c = 1;
        return res + this._M;
      }

      this._c = 0;
      return res;
    }
    /**
     * @override
     * @returns {number}
     */

  }, {
    key: "next",
    value: function next() {
      return (this._nextInt() >>> 0) / this._M;
    }
    /**
     * Pre-calculate shifted pointers for performance reasons
     * @returns {Array<number>}
     * @private
     */

  }, {
    key: "_generate_shifted_pointers",
    value: function _generate_shifted_pointers(shift) {
      var res = [];

      for (var i = 0; i < LAG_R; i += 1) {
        res[i] = i - shift;

        if (res[i] < 0) {
          res[i] += LAG_R;
        }
      }

      return res;
    }
  }]);

  return Swb2712PRNG;
}(_BasicPRNG2["default"]);

var _default = Swb2712PRNG;
exports["default"] = _default;