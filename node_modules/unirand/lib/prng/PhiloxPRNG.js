"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _BasicPRNG2 = _interopRequireDefault(require("./BasicPRNG"));

var _TucheiPRNG = _interopRequireDefault(require("./TucheiPRNG"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var KEY_CONSTANT_1 = 0xCD9E8D57;
var KEY_CONSTANT_2 = 0xD2511F53;
var M_CONSTANT = 0xFFFFFFFF;
var KEY_CONSTANT_1_MULHI = (KEY_CONSTANT_1 >>> 0) / M_CONSTANT;
var KEY_CONSTANT_2_MULHI = (KEY_CONSTANT_2 >>> 0) / M_CONSTANT;
var KEY_CONSTANT_3 = 0x9E3779B9;
var KEY_CONSTANT_4 = 0xBB67AE85;
var RECALCULATE_FREQ = 65536;

var PhiloxPRNG = /*#__PURE__*/function (_BasicPRNG) {
  _inherits(PhiloxPRNG, _BasicPRNG);

  var _super = _createSuper(PhiloxPRNG);

  // state after setting seed
  function PhiloxPRNG() {
    var _this;

    _classCallCheck(this, PhiloxPRNG);

    _this = _super.call(this);
    _this._localPrng = new _TucheiPRNG["default"]();
    _this._no_seed = true;
    _this._state = {};
    _this._M = M_CONSTANT;
    _this._recalculate_counter = 0;
    _this._modulos1 = [3449720151, // KEY_CONSTANT_1 * 10^0 mod _M
    137463150, // KEY_CONSTANT_1 * 10^1 mod _M
    1374631500, // KEY_CONSTANT_1 * 10^2 mod _M
    861413115, // KEY_CONSTANT_1 * 10^3 mod _M
    24196560, // KEY_CONSTANT_1 * 10^4 mod _M
    241965600, // KEY_CONSTANT_1 * 10^5 mod _M
    2419656000, // KEY_CONSTANT_1 * 10^6 mod _M
    2721723525, // KEY_CONSTANT_1 * 10^7 mod _M
    1447431480, // KEY_CONSTANT_1 * 10^8 mod _M
    1589412915 // KEY_CONSTANT_1 * 10^9 mod _M
    ];
    _this._modulos2 = [3528531795, // KEY_CONSTANT_2 * 10^0 mod _M
    925579590, // KEY_CONSTANT_2 * 10^1 mod _M
    665861310, // KEY_CONSTANT_2 * 10^2 mod _M
    2363645805, // KEY_CONSTANT_2 * 10^3 mod _M
    2161621575, // KEY_CONSTANT_2 * 10^4 mod _M
    141379275, // KEY_CONSTANT_2 * 10^5 mod _M
    1413792750, // KEY_CONSTANT_2 * 10^6 mod _M
    1253025615, // KEY_CONSTANT_2 * 10^7 mod _M
    3940321560, // KEY_CONSTANT_2 * 10^8 mod _M
    748509945 // KEY_CONSTANT_2 * 10^9 mod _M
    ];
    _this._xdata_modulos1 = _this._constructXDataModulos(_this._modulos1);
    _this._xdata_modulos2 = _this._constructXDataModulos(_this._modulos2);
    _this._chunk_pointer = 0;

    _this._set_random_seed();

    return _this;
  }
  /**
   * Indicate whether seed is set up
   * @private
   * @override
   */


  _createClass(PhiloxPRNG, [{
    key: "_has_no_seed",
    value: function _has_no_seed() {
      return this._no_seed;
    }
    /**
     * Initializes initial values and sets state for calculating random number
     * @private
     * @override
     */

  }, {
    key: "_initialize",
    value: function _initialize() {
      var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      var vector_seed = this._construct_vector_seed(seed);

      this._key = [vector_seed[0], vector_seed[1]];
      this._counter = [vector_seed[0], vector_seed[1], vector_seed[2], vector_seed[3]];
    }
  }, {
    key: "_construct_number_seed",
    value: function _construct_number_seed(seed) {
      if (typeof seed === 'number') {
        return Math.floor(seed) % this._M;
      } else if (typeof seed === 'string') {
        var res = 0;

        for (var i = 0; i < seed.length; i += 1) {
          res = (res + seed.charCodeAt(i)) % this._M;
        }

        return res;
      }

      return 0;
    }
    /**
     * Constructs vector (of size 4) seed from single seed
     * @param {NumberString} seed
     * @private
     */

  }, {
    key: "_construct_vector_seed",
    value: function _construct_vector_seed(seed) {
      var res = [];
      res[0] = seed;
      res[1] = seed & 0xFFFF;
      res[2] = seed;
      res[3] = seed >> 16;
      return res;
    }
    /**
     * Sets state for random number generating
     * @private
     */

  }, {
    key: "_setState",
    value: function _setState(_counter, _key) {
      this._state._counter = _counter.slice();
      this._state._key = _key.slice();
    }
    /**
     * Gets values from state
     * @private
     * @override
     */

  }, {
    key: "_get_from_state",
    value: function _get_from_state() {
      this._counter = this._state._counter.slice();
      this._key = this._state._key.slice();
    }
    /**
     * Creates random seed
     * @private
     * @override
     */

  }, {
    key: "_set_random_seed",
    value: function _set_random_seed() {
      if (this._recalculate_counter === 0) {
        this._seed = Math.floor(this._M * this._localPrng.random());

        this._initialize(this._seed);
      }

      this._recalculate_counter += 1;

      if (this._recalculate_counter === RECALCULATE_FREQ) {
        this._recalculate_counter = 0;
      }
    }
    /**
     * Prepare initial values for calculating random value
     * @private
     * @override
     */

  }, {
    key: "_prepare_initial",
    value: function _prepare_initial() {
      if (this._has_no_seed()) {
        this._set_random_seed();
      } else {
        this._get_from_state();
      }
    }
    /**
     * @override
     * @param {?NumberString} seed_value
     */

  }, {
    key: "seed",
    value: function seed(seed_value) {
      if (seed_value === undefined || seed_value === null) {
        this._no_seed = true;

        this._localPrng.seed(null);

        this._set_random_seed();
      } else if (typeof seed_value === 'number') {
        this._seed = Math.floor(seed_value);

        this._localPrng.seed(this._seed);

        this._initialize(this._seed);

        this._setState(this._counter, this._key);

        this._no_seed = false;
      } else if (typeof seed_value === 'string') {
        this._seed = this._construct_number_seed(seed_value);

        this._localPrng.seed(this._seed);

        this._initialize(this._seed);

        this._setState(this._counter, this._key);

        this._no_seed = false;
      } else {
        this._no_seed = true;

        this._localPrng.seed(null);

        this._set_random_seed();

        throw new Error('You should point seed with types: "undefined", "number" or "string"');
      }
    }
    /**
     * Generates next 4 random numbers
     * @private
     */

  }, {
    key: "_updateNextChunk",
    value: function _updateNextChunk() {
      var low0 = this._multiplyByConstantWithModulo(this._counter[0], this._xdata_modulos2);

      var high0 = this._mulhi(this._counter[0], KEY_CONSTANT_2_MULHI);

      var low1 = this._multiplyByConstantWithModulo(this._counter[2], this._xdata_modulos1);

      var high1 = this._mulhi(this._counter[2], KEY_CONSTANT_1_MULHI);

      this._counter = [(high1 ^ this._counter[1] ^ this._key[0]) >>> 0, low1, (high0 ^ this._counter[3] ^ this._key[1]) >>> 0, low0];

      this._updateNextKeys();
    }
  }, {
    key: "_updateNextKeys",
    value: function _updateNextKeys() {
      this._key[0] = this._key[0] + KEY_CONSTANT_3;

      if (this._key[0] >= this._M) {
        this._key[0] = this._key[0] % this._M;
      }

      this._key[1] = this._key[1] + KEY_CONSTANT_4;

      if (this._key[1] >= this._M) {
        this._key[1] = this._key[1] % this._M;
      }
    }
    /**
     * @override
     * @returns {number}
     * @private
     */

  }, {
    key: "_nextInt",
    value: function _nextInt() {
      if (this._chunk_pointer === 0) {
        this._updateNextChunk();
      }

      var res = this._counter[this._chunk_pointer];
      this._chunk_pointer += 1;

      if (this._chunk_pointer === 4) {
        this._chunk_pointer = 0;
      }

      return res;
    }
    /**
     * Multiply value by CONSTANT with modulo
     * Need it for more precise calculation
     * @private
     */

  }, {
    key: "_multiplyByConstantWithModulo",
    value: function _multiplyByConstantWithModulo(x, xDataModulo) {
      // extract data from x
      var xData = 0;
      var _x = x;
      var i = 0;
      var res = 0;

      while (_x > 0) {
        xData = _x % 10;
        res += xDataModulo[xData + 10 * i];
        _x = Math.floor(_x / 10);
        i += 1;
      }

      if (res >= this._M) {
        res = res % this._M;
      }

      return res;
    }
    /**
     * Constructs xData * this._modulos[j] hashmap
     * Keys will be i + j * 10 (i always [0..9])
     * Calculates data only in constructor
     * @private
     */

  }, {
    key: "_constructXDataModulos",
    value: function _constructXDataModulos(modulos) {
      var res = []; // prefill res array

      for (var i = 0; i < (modulos.length + 1) * 10; i += 1) {
        res[i] = 0;
      }

      for (var xData = 0; xData < 10; xData += 1) {
        for (var j = 0; j < modulos.length; j += 1) {
          res[xData + j * 10] = xData * modulos[j] % this._M;
        }
      }

      return res;
    }
  }, {
    key: "_mulhi",
    value: function _mulhi(x, multiplier) {
      return Math.floor(x * multiplier);
    }
    /**
     * @override
     * @returns {number}
     */

  }, {
    key: "next",
    value: function next() {
      return (this._nextInt() >>> 0) / this._M;
    }
  }]);

  return PhiloxPRNG;
}(_BasicPRNG2["default"]);

var _default = PhiloxPRNG;
exports["default"] = _default;