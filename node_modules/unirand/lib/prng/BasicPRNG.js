"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _hash = _interopRequireDefault(require("../utils/hash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BasicPRNG = /*#__PURE__*/function () {
  function BasicPRNG() {
    _classCallCheck(this, BasicPRNG);

    this._seed = undefined;
  }
  /**
   * Random number generator with seed
   * @public
   * @returns {number} random number
   */


  _createClass(BasicPRNG, [{
    key: "random",
    value: function random() {
      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      this._prepare_initial();

      if (typeof n !== 'number') {
        return this.next();
      }

      if (n < 1) {
        return this.next();
      }

      var random_array = [];

      for (var i = 0; i < n; i += 1) {
        random_array[i] = this.next();
      }

      return random_array;
    }
    /**
     * Next random value
     * Returns only single random value
     * Does not support seed
     * @abstract
     * @returns {number}
     */

  }, {
    key: "next",
    value: function next() {
      throw new Error('Unassigned method');
    }
    /**
     * Next integer random value
     * Returns only single random value
     * Does not support seed
     * @public
     * @returns {number}
     */

  }, {
    key: "nextInt",
    value: function nextInt() {
      return this._nextInt() >>> 0; // returns only unsigned integers
    }
    /**
     * @abstract
     * @protected
     */

  }, {
    key: "_nextInt",
    value: function _nextInt() {
      throw new Error('Unassigned method');
    }
    /**
     * Generates random integer [0, 2^32)
     * @public
     * @returns {number}
     */

  }, {
    key: "randomInt",
    value: function randomInt() {
      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      this._prepare_initial();

      if (typeof n !== 'number') {
        return this.nextInt();
      }

      if (n < 1) {
        return this.nextInt();
      }

      var random_array = [];

      for (var i = 0; i < n; i += 1) {
        random_array[i] = this.nextInt();
      }

      return random_array;
    }
    /**
     * Sets seed value for PRNG
     * @public
     */

  }, {
    key: "seed",
    value: function seed(seed_value) {
      this._seed = seed_value;
    }
    /**
     * Modulo for seed
     * @returns {number}
     */

  }, {
    key: "_prepare_initial",

    /**
     * Prepare initial values for calculating random value
     * @private
     */
    value: function _prepare_initial() {
      if (this._has_no_seed()) {
        this._initialize();

        this._set_random_seed();
      } else {
        this._get_from_state();
      }
    }
    /**
     * @abstract
     * @protected
     */

  }, {
    key: "_has_no_seed",
    value: function _has_no_seed() {
      throw new Error('Unassigned method');
    }
    /**
     * @protected
     * @abstract
     */

  }, {
    key: "_initialize",
    value: function _initialize() {
      throw new Error('Unassigned method');
    }
    /**
     * @protected
     * @abstract
     */

  }, {
    key: "_get_from_state",
    value: function _get_from_state() {
      throw new Error('Unassigned method');
    }
    /**
     * @protected
     * @abstract
     */

  }, {
    key: "_set_random_seed",
    value: function _set_random_seed() {
      throw new Error('Unassigned method');
    }
  }], [{
    key: "random_seed",

    /**
     * Sets random seed
     */
    value: function random_seed() {
      var _seed = _hash["default"].hash(Date.now() + Math.floor(Math.random() * BasicPRNG.modulo));

      if (_seed >= BasicPRNG.modulo) {
        _seed = _seed % BasicPRNG.modulo;
      }

      if (_seed < 0) {
        _seed += BasicPRNG.modulo - 1;
      }

      return _seed;
    }
  }, {
    key: "modulo",
    get: function get() {
      return 2147483647;
    }
  }]);

  return BasicPRNG;
}();

var _default = BasicPRNG;
exports["default"] = _default;