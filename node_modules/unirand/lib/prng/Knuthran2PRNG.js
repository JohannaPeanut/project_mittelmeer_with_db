"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _BasicPRNG2 = _interopRequireDefault(require("./BasicPRNG"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Knuthran2PRNG = /*#__PURE__*/function (_BasicPRNG) {
  _inherits(Knuthran2PRNG, _BasicPRNG);

  var _super = _createSuper(Knuthran2PRNG);

  // pre calculated modulo of A1 * 10^x mod _M
  // pre calculated modulo of A2 * 10^x mod _M
  // state after setting seed
  function Knuthran2PRNG() {
    var _this;

    _classCallCheck(this, Knuthran2PRNG);

    _this = _super.call(this);
    _this._no_seed = true;
    _this._state = {};
    _this._M = 0x7FFFFFFF;
    _this._A1 = 0x1033C4D7;
    _this._A2 = 0x12B9B0A5; // to be recalculated since _M changed

    _this._modulosA1 = [271828183, // A1 * 10^0 mod _M
    570798183, // A1 * 10^1 mod _M
    1413014536, // A1 * 10^2 mod _M
    1245243478, // A1 * 10^3 mod _M
    1715016545, // A1 * 10^4 mod _M
    2117779921, // A1 * 10^5 mod _M
    1850446387, // A1 * 10^6 mod _M
    1324594694, // A1 * 10^7 mod _M
    361045058, // A1 * 10^8 mod _M
    1462966933 // A1 * 10^9 mod _M
    ];
    _this._modulosA2 = [314159269, // A2 * 10^0 mod _M
    994109043, // A2 * 10^1 mod _M
    1351155842, // A2 * 10^2 mod _M
    626656538, // A2 * 10^3 mod _M
    1971598086, // A2 * 10^4 mod _M
    388628037, // A2 * 10^5 mod _M
    1738796723, // A2 * 10^6 mod _M
    208098054, // A2 * 10^7 mod _M
    2080980540, // A2 * 10^8 mod _M
    1482452577 // A2 * 10^9 mod _M
    ];
    _this._xdata_modulosA1 = _this._constructXDataModulos(_this._modulosA1);
    _this._xdata_modulosA2 = _this._constructXDataModulos(_this._modulosA2);

    _this._initialize();

    _this._set_random_seed();

    return _this;
  }
  /**
   * Indicate whether seed is set up
   * @private
   * @override
   */


  _createClass(Knuthran2PRNG, [{
    key: "_has_no_seed",
    value: function _has_no_seed() {
      return this._no_seed;
    }
    /**
     * Initializes initial values and sets state for calculating random number
     * @private
     * @override
     */

  }, {
    key: "_initialize",
    value: function _initialize() {
      this._xm1 = 0;
      this._xm2 = 0;
    }
    /**
     * Sets state for random number generating
     * @param {number} xm1
     * @param {number} xm2
     * @private
     */

  }, {
    key: "_setState",
    value: function _setState(xm1, xm2) {
      this._state._xm1 = xm1;
      this._state._xm2 = xm2;
    }
    /**
     * Gets values from state
     * @private
     * @override
     */

  }, {
    key: "_get_from_state",
    value: function _get_from_state() {
      this._xm1 = this._state._xm1;
      this._xm2 = this._state._xm2;
    }
    /**
     * Creates random seed
     * @private
     * @override
     */

  }, {
    key: "_set_random_seed",
    value: function _set_random_seed() {
      this._seed = _BasicPRNG2["default"].random_seed();
      this._xm2 = this._seed % this._M;
      this._xm1 = this._xm2 << 13;
    }
    /**
     * @override
     * @param {?NumberString} seed_value
     */

  }, {
    key: "seed",
    value: function seed(seed_value) {
      this._initialize();

      if (seed_value === undefined || seed_value === null) {
        this._no_seed = true;

        this._set_random_seed();
      } else if (typeof seed_value === 'number') {
        this._seed = Math.floor(seed_value);
        this._xm2 = this._seed % this._M;
        this._xm1 = this._xm2 << 13;

        this._setState(this._xm1, this._xm2);

        this._no_seed = false;
      } else if (typeof seed_value === 'string') {
        this._seed = seed_value;

        for (var i = 0; i < this._seed.length; i += 1) {
          this._xm2 = (this._xm2 + this._seed.charCodeAt(i)) % this._M;

          this._nextInt();
        }

        this._setState(this._xm1, this._xm2);

        this._no_seed = false;
      } else {
        this._no_seed = true;

        this._set_random_seed();

        throw new Error('You should point seed with types: "undefined", "number" or "string"');
      }
    }
    /**
     * Multiply value by A with modulo
     * Need it for more precise calculation
     * @private
     */

  }, {
    key: "_multiplyByAWithModulo",
    value: function _multiplyByAWithModulo(x, xdata_modulos) {
      // extract data from x
      var xData = 0;
      var _x = x;
      var i = 0;
      var res = 0;

      while (_x > 0) {
        xData = _x % 10;
        res += xdata_modulos[xData + 10 * i];
        _x = Math.floor(_x / 10);
        i += 1;
      }

      return res;
    }
    /**
     * @override
     * @returns {number}
     * @private
     */

  }, {
    key: "_nextInt",
    value: function _nextInt() {
      var res = this._multiplyByAWithModulo(this._xm1, this._xdata_modulosA1) + this._multiplyByAWithModulo(this._xm2, this._xdata_modulosA2);

      this._xm2 = this._xm1;

      if (res >= this._M) {
        res = res % this._M;
      }

      this._xm1 = res;
      return res;
    }
    /**
     * Constructs xData * this._modulos[j] hashmap
     * Keys will be i + j * 10 (i always [0..9])
     * Calculates data only in constructor
     * @private
     */

  }, {
    key: "_constructXDataModulos",
    value: function _constructXDataModulos(modulos) {
      var res = []; // prefill res array

      for (var i = 0; i < (modulos.length + 1) * 10; i += 1) {
        res[i] = 0;
      }

      for (var xData = 0; xData < 10; xData += 1) {
        for (var j = 0; j < modulos.length; j += 1) {
          res[xData + j * 10] = xData * modulos[j] % this._M;
        }
      }

      return res;
    }
    /**
     * @override
     * @returns {number}
     */

  }, {
    key: "next",
    value: function next() {
      return (this._nextInt() >>> 0) / this._M;
    }
  }]);

  return Knuthran2PRNG;
}(_BasicPRNG2["default"]);

var _default = Knuthran2PRNG;
exports["default"] = _default;