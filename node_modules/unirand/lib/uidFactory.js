"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Factory method for generating UIDs using different algorithms
 * Created by Alexey S. Kiselev
 */
var uidGenerators = require('./utils/string_utils/uid');

var DEFAULT_GENERATOR = 'uuid';

var UidFactory = /*#__PURE__*/function () {
  function UidFactory() {
    _classCallCheck(this, UidFactory);

    this.setGenerator(DEFAULT_GENERATOR);
  }

  _createClass(UidFactory, [{
    key: "setGenerator",
    value: function setGenerator(generator) {
      if (!uidGenerators[generator]) {
        throw new Error("UID generator: \"".concat(generator, "\" is not allowed"));
      }

      this._currentGenerator = generator;
    }
  }, {
    key: "random",
    value: function random() {
      return uidGenerators[this._currentGenerator].generateRandom();
    }
  }, {
    key: "next",
    value: function next() {
      return uidGenerators[this._currentGenerator].generateNext();
    }
  }]);

  return UidFactory;
}();

var _default = UidFactory;
exports["default"] = _default;