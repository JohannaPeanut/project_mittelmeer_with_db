"use strict";

var _prngProxy = _interopRequireDefault(require("../../prng/prngProxy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Binomial = require('../../methods/binomial');

var binomial = new Binomial(1, 1);

var UIDGenerators = require('./uid');

var randomBitStringHelper = require('./randomBitStringHelper');

var NUMERIC_LETTERS = '0123456789';
var ALPHABETIC_LETTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
var ALPHANUMERIC_LETTERS = ALPHABETIC_LETTERS + NUMERIC_LETTERS;
var HEX_LETTERS = '0123456789abcdef';
var ASCII_LETTERS = ''; // populate Ascii letters

for (var i = 32; i < 127; i += 1) {
  ASCII_LETTERS += String.fromCharCode(i);
}

var RandomStringUtils = /*#__PURE__*/function () {
  function RandomStringUtils() {
    _classCallCheck(this, RandomStringUtils);
  }

  _createClass(RandomStringUtils, null, [{
    key: "random",

    /**
     * Generates random string from the set of given characters
     * @param {string} chars - characters to pick for random string
     * @param {number} length - the length of random string
     * @public
     */
    value: function random(chars, length) {
      var randoms = _prngProxy["default"].random(length);

      var charsLength = chars.length;
      var res = '';

      for (var _i = 0; _i < length; _i += 1) {
        res += chars[Math.floor(randoms[_i] * charsLength)];
      }

      return res;
    }
    /**
     * Generates random string from the set of given characters
     * @param {string} chars - characters to pick for random string
     * @param {number} length - the length of random string
     * @public
     */

  }, {
    key: "next",
    value: function next(chars, length) {
      var charsLength = chars.length;
      var res = '';

      for (var _i2 = 0; _i2 < length; _i2 += 1) {
        res += chars[Math.floor(_prngProxy["default"].next() * charsLength)];
      }

      return res;
    }
    /**
     * Generates random string from the set of HEX characters - 0123456789abcdef
     * @param {number} length - the length of random string
     * @public
     */

  }, {
    key: "randomHex",
    value: function randomHex(length) {
      return RandomStringUtils.random(HEX_LETTERS, length);
    }
    /**
     * Generates random string from the set of HEX characters - 0123456789abcdef
     * @param {number} length - the length of random string
     * @public
     */

  }, {
    key: "nextHex",
    value: function nextHex(length) {
      return RandomStringUtils.next(HEX_LETTERS, length);
    }
    /**
     * Generates random string from the set of Latin alphabetic characters (a-z, A-Z)
     * @param {number} length - the length of random string
     * @public
     */

  }, {
    key: "randomAlphabetic",
    value: function randomAlphabetic(length) {
      return RandomStringUtils.random(ALPHABETIC_LETTERS, length);
    }
    /**
     * Generates random string from the set of Latin alphabetic characters (a-z, A-Z)
     * @param {number} length - the length of random string
     * @public
     */

  }, {
    key: "nextAlphabetic",
    value: function nextAlphabetic(length) {
      return RandomStringUtils.next(ALPHABETIC_LETTERS, length);
    }
    /**
     * Generates random string from the set of characters whose ASCII value is between 32 and 126 (inclusive)
     * @param {number} length - the length of random string
     * @public
     */

  }, {
    key: "randomAscii",
    value: function randomAscii(length) {
      return RandomStringUtils.random(ASCII_LETTERS, length);
    }
    /**
     * Generates random string from the set of characters whose ASCII value is between 32 and 126 (inclusive)
     * @param {number} length - the length of random string
     * @public
     */

  }, {
    key: "nextAscii",
    value: function nextAscii(length) {
      return RandomStringUtils.next(ASCII_LETTERS, length);
    }
    /**
     * Generates random string from the set of Latin alphabetic characters (a-z, A-Z) and the digits 0-9
     * @param {number} length - the length of random string
     * @public
     */

  }, {
    key: "randomAlphanumeric",
    value: function randomAlphanumeric(length) {
      return RandomStringUtils.random(ALPHANUMERIC_LETTERS, length);
    }
    /**
     * Generates random string from the set of Latin alphabetic characters (a-z, A-Z) and the digits 0-9
     * @param {number} length - the length of random string
     * @public
     */

  }, {
    key: "nextAlphanumeric",
    value: function nextAlphanumeric(length) {
      return RandomStringUtils.next(ALPHANUMERIC_LETTERS, length);
    }
    /**
     * Generates random string from the set of numeric characters
     * @param {number} length - the length of random string
     * @public
     */

  }, {
    key: "randomNumeric",
    value: function randomNumeric(length) {
      return RandomStringUtils.random(NUMERIC_LETTERS, length);
    }
    /**
     * Generates random string from the set of numeric characters
     * @param {number} length - the length of random string
     * @public
     */

  }, {
    key: "nextNumeric",
    value: function nextNumeric(length) {
      return RandomStringUtils.next(NUMERIC_LETTERS, length);
    }
    /**
     * Generates random bit string consist of "1" or "0"
     * @param {number} p - probability that each bit will be "1", default is 0.5
     * @param {number} length
     */

  }, {
    key: "randomBitString",
    value: function randomBitString(length) {
      var p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
      binomial.refresh(length, p);

      if (binomial.isError().error) {
        throw new Error(binomial.isError().error);
      }

      return randomBitStringHelper(length, p, binomial.random());
    }
    /**
     * Generates random bit string consist of "1" or "0"
     * @param {number} p - probability that each bit will be "1", default is 0.5
     * @param {number} length
     */

  }, {
    key: "nextBitString",
    value: function nextBitString(length) {
      var p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
      binomial.refresh(length, p);

      if (binomial.isError().error) {
        throw new Error(binomial.isError().error);
      }

      return randomBitStringHelper(length, p, binomial.next());
    }
    /**
     * Generates different types of UIDs
     * @param {string} type - type of UID
     * @returns {string}
     */

  }, {
    key: "randomUID",
    value: function randomUID(type) {
      if (!UIDGenerators[type]) {
        throw new Error("Not allowed UID generator \"".concat(type, "\""));
      }

      return UIDGenerators[type].generateRandom();
    }
    /**
     * Generates different types of UIDs
     * @param {string} type - type of UID
     * @returns {string}
     */

  }, {
    key: "nextUID",
    value: function nextUID(type) {
      if (!UIDGenerators[type]) {
        throw new Error("Not allowed UID generator \"".concat(type, "\""));
      }

      return UIDGenerators[type].generateNext();
    }
  }]);

  return RandomStringUtils;
}();

module.exports = RandomStringUtils;