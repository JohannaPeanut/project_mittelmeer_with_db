"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Common class for all uid generators
 * Created by Alexey S. Kiselev
 */
var TIMESTAMP_SIZE = 4;
var UNIX_TIMESTAMP_SIZE = 8;
var EPOCH = 1400000000;

var BaseUid = /*#__PURE__*/function () {
  function BaseUid() {
    _classCallCheck(this, BaseUid);
  }

  _createClass(BaseUid, [{
    key: "getTimestampSize",
    value: function getTimestampSize() {
      return TIMESTAMP_SIZE;
    }
    /**
     * Generates random time, then converts it to array of 4 bytes
     * @returns {RandomArray}
     * @private
     */

  }, {
    key: "_createTimestampBytesArray",
    value: function _createTimestampBytesArray() {
      var res = []; // TODO: fix it after 2038-01-19T03:14:07+00:00

      var ts = Math.floor(Date.now() / 1000) - EPOCH;

      for (var i = 0; i < TIMESTAMP_SIZE; i += 1) {
        res[TIMESTAMP_SIZE - 1 - i] = ts & 0xFF;
        ts >>= 8;
      }

      return res;
    }
    /**
     * Generates random time in millis, then converts it to array of 8 bytes
     * @returns {RandomArray}
     * @private
     */

  }, {
    key: "_createUnixTimestampBytesArray",
    value: function _createUnixTimestampBytesArray(alphabet, modulo) {
      var res = '';
      var ts = Date.now();

      for (var i = 0; i < UNIX_TIMESTAMP_SIZE; i += 1) {
        res = alphabet[ts % modulo] + res;
        ts = Math.floor(ts / modulo);
      }

      return res;
    }
  }]);

  return BaseUid;
}();

var _default = BaseUid;
exports["default"] = _default;