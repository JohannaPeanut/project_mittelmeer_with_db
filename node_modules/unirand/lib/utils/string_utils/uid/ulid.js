"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _prngProxy = _interopRequireDefault(require("../../../prng/prngProxy"));

var _base = require("../../encoders/base32");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var crockfordBase32 = new _base.CrockfordBase32();
var PAYLOAD_SIZE = 8;
var MODULO = 256;

var RandomUlidGenerator = /*#__PURE__*/function () {
  function RandomUlidGenerator() {
    _classCallCheck(this, RandomUlidGenerator);
  }

  _createClass(RandomUlidGenerator, [{
    key: "generateRandom",
    value: function generateRandom() {
      return crockfordBase32.encodeFromByteArray(this._getRandomByteArray(_prngProxy["default"].random(PAYLOAD_SIZE)));
    }
  }, {
    key: "generateNext",
    value: function generateNext() {
      var randoms = [];

      for (var i = 0; i < PAYLOAD_SIZE; i += 1) {
        randoms[i] = _prngProxy["default"].next();
      }

      return crockfordBase32.encodeFromByteArray(this._getRandomByteArray(randoms));
    }
    /**
     * Generates random time in millis, then converts it to array of 8 bytes
     * @returns {RandomArray}
     * @private
     */

  }, {
    key: "_createUnixTimestampBytesArray",
    value: function _createUnixTimestampBytesArray() {
      var res = [];
      var ts = Date.now();

      for (var i = 0; i < 6; i += 1) {
        res[5 - i] = ts % MODULO;
        ts = Math.floor(ts / MODULO);
      }

      return res;
    }
  }, {
    key: "_getRandomByteArray",
    value: function _getRandomByteArray(randoms) {
      var res = this._createUnixTimestampBytesArray();

      for (var i = 0; i < PAYLOAD_SIZE; i += 1) {
        res[6 + i] = Math.floor(randoms[i] * MODULO);
      }

      return res;
    }
  }]);

  return RandomUlidGenerator;
}();

var _default = RandomUlidGenerator;
exports["default"] = _default;