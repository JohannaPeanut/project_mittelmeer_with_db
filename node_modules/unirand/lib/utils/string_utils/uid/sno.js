"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _prngProxy = _interopRequireDefault(require("../../../prng/prngProxy"));

var _base = require("../../encoders/base32");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MAX_SEQUENCE_VALUE = 0xFFFF; // use meta and partition random values

var MAX_META_PARTITION_VALUE = 0xFFFFFF;
var base32Hex = new _base.Base32Hex(true);

var RandomSnoGenerator = /*#__PURE__*/function () {
  function RandomSnoGenerator() {
    _classCallCheck(this, RandomSnoGenerator);

    this.sequence = 0;
  }

  _createClass(RandomSnoGenerator, [{
    key: "generateRandom",
    value: function generateRandom() {
      return this._getSno(_prngProxy["default"].random());
    }
  }, {
    key: "generateNext",
    value: function generateNext() {
      return this._getSno(_prngProxy["default"].next());
    }
  }, {
    key: "_getSno",
    value: function _getSno(random) {
      var resBytes = this._convertTimestampToBytesArray();

      var rand = Math.floor(random * MAX_META_PARTITION_VALUE); // generates rand as bytes array

      for (var i = 0; i < 3; i += 1) {
        resBytes[7 - i] = rand % 256;
        rand = Math.floor(rand / 256);
      }

      this.sequence = this.sequence + 1 & MAX_SEQUENCE_VALUE;
      var seq = this.sequence | 0;

      for (var _i = 0; _i < 2; _i += 1) {
        resBytes[9 - _i] = seq % 256;
        seq = Math.floor(seq / 256);
      }

      return base32Hex.encodeFromByteArray(resBytes);
    }
    /**
     * @returns {string}
     * @private
     */

  }, {
    key: "_convertTimestampToBytesArray",
    value: function _convertTimestampToBytesArray() {
      var res = [];
      var ts = Math.floor(Date.now() / 4);

      for (var i = 0; i < 5; i += 1) {
        res[4 - i] = ts % 256;
        ts = Math.floor(ts / 256);
      }

      return res;
    }
  }]);

  return RandomSnoGenerator;
}();

var _default = RandomSnoGenerator;
exports["default"] = _default;