"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CrockfordBase32 = exports.ZBase32 = exports.Base32Hex = exports.Base32 = void 0;

var _commonEncoder = _interopRequireDefault(require("./commonEncoder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ALLOWED_TYPES = {
  'base32': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
  // RFC 4648
  'base32Hex': '0123456789ABCDEFGHIJKLMNOPQRSTUV',
  // RFC 4648
  'z-base-32': 'ybndrfg8ejkmcpqxot1uwisza345h769',
  'crockford-base32': '0123456789ABCDEFGHJKMNPQRSTVWXYZ'
};
var PADDING = '=';
var NO_PADDING = '';

var CommonBase32 = /*#__PURE__*/function (_CommonEncoder) {
  _inherits(CommonBase32, _CommonEncoder);

  var _super = _createSuper(CommonBase32);

  function CommonBase32(alphabet) {
    var _this;

    _classCallCheck(this, CommonBase32);

    _this = _super.call(this);

    _this.setAlphabet(alphabet);

    _this._createCodesMap();

    return _this;
  }

  _createClass(CommonBase32, [{
    key: "setAlphabet",
    value: function setAlphabet(alphabet) {
      if (!ALLOWED_TYPES[alphabet]) {
        throw new Error("Base32 encoder: alphabet ".concat(alphabet, " is not allowed"));
      }

      this._alphabet = ALLOWED_TYPES[alphabet];
    }
    /**
     *
     * @param bytes {Array<number>} - [<0-255>,]
     */

  }, {
    key: "encodeFromByteArray",
    value: function encodeFromByteArray(bytes) {
      var res = '';
      var i = 0;
      var index = 0;
      var currByte;
      var nextByte = 0;
      var digit = 0;
      var resLength = Math.ceil(bytes.length / 5) * 8;

      while (i < bytes.length) {
        currByte = bytes[i];

        if (index > 3) {
          nextByte = i + 1 < bytes.length ? bytes[i + 1] : 0;
          digit = currByte & 0xFF >> index;
          index = (index + 5) % 8;
          digit <<= index;
          digit |= nextByte >> 8 - index;
          i += 1;
        } else {
          digit = currByte >> 8 - (index + 5) & 0x1F;
          index = (index + 5) % 8;

          if (index === 0) {
            i += 1;
          }
        }

        res += this._alphabet[digit];
      }

      if (this._getPadding() !== NO_PADDING) {
        while (res.length < resLength) {
          res += this._getPadding();
        }

        return res;
      }

      return res;
    }
  }, {
    key: "decodeToByteArray",
    value: function decodeToByteArray(str) {
      var res = [];
      var maxResLength = Math.ceil(str.length / 8) * 5;

      var _char;

      var digit;
      var tempDigit;
      var index = 0;
      var offset = 0;

      for (var i = 0; i < str.length; i += 1) {
        _char = str[i];

        if (!this._getCodesMap()[_char] && this._getCodesMap()[_char] !== 0) {
          if (this._getPadding() !== NO_PADDING && _char === this._getPadding()) {
            break;
          }

          throw new Error('Base32 decode: invalid input');
        }

        digit = this._getCodesMap()[_char];

        if (index <= 3) {
          index = (index + 5) % 8;

          if (index === 0) {
            res[offset] |= digit;
            offset += 1;

            if (offset >= maxResLength) {
              break;
            }
          } else {
            res[offset] |= digit << 8 - index & 0xFF;
          }
        } else {
          index = (index + 5) % 8;
          res[offset] |= digit >> index;
          offset += 1;

          if (offset >= maxResLength) {
            break;
          }

          tempDigit = res[offset] | digit << 8 - index & 0xFF;

          if (tempDigit !== 0x00) {
            res[offset] = tempDigit;
          }
        }
      }

      return res;
    }
  }, {
    key: "_getPadding",
    value: function _getPadding() {
      return NO_PADDING;
    }
  }, {
    key: "_createCodesMap",
    value: function _createCodesMap() {
      this._codesMap = {};

      for (var i = 0; i < this._alphabet.length; i += 1) {
        this._codesMap[this._alphabet[i]] = i;
      }
    }
  }, {
    key: "_getCodesMap",
    value: function _getCodesMap() {
      return this._codesMap;
    }
  }]);

  return CommonBase32;
}(_commonEncoder["default"]);

var Base32 = /*#__PURE__*/function (_CommonBase) {
  _inherits(Base32, _CommonBase);

  var _super2 = _createSuper(Base32);

  function Base32() {
    _classCallCheck(this, Base32);

    return _super2.call(this, 'base32');
  }

  _createClass(Base32, [{
    key: "_getPadding",
    value: function _getPadding() {
      return PADDING;
    }
  }]);

  return Base32;
}(CommonBase32);

exports.Base32 = Base32;

var Base32Hex = /*#__PURE__*/function (_CommonBase2) {
  _inherits(Base32Hex, _CommonBase2);

  var _super3 = _createSuper(Base32Hex);

  // need it for xid generator
  function Base32Hex() {
    var _this2;

    var noPadding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    _classCallCheck(this, Base32Hex);

    _this2 = _super3.call(this, 'base32Hex');
    _this2._paddingSymbol = noPadding ? NO_PADDING : PADDING;
    return _this2;
  }

  _createClass(Base32Hex, [{
    key: "_getPadding",
    value: function _getPadding() {
      return this._paddingSymbol;
    }
  }]);

  return Base32Hex;
}(CommonBase32);

exports.Base32Hex = Base32Hex;

var ZBase32 = /*#__PURE__*/function (_CommonBase3) {
  _inherits(ZBase32, _CommonBase3);

  var _super4 = _createSuper(ZBase32);

  function ZBase32() {
    _classCallCheck(this, ZBase32);

    return _super4.call(this, 'z-base-32');
  }

  return ZBase32;
}(CommonBase32);

exports.ZBase32 = ZBase32;

var CrockfordBase32 = /*#__PURE__*/function (_CommonBase4) {
  _inherits(CrockfordBase32, _CommonBase4);

  var _super5 = _createSuper(CrockfordBase32);

  function CrockfordBase32() {
    _classCallCheck(this, CrockfordBase32);

    return _super5.call(this, 'crockford-base32');
  }

  return CrockfordBase32;
}(CommonBase32);

exports.CrockfordBase32 = CrockfordBase32;