"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _commonEncoder = _interopRequireDefault(require("./commonEncoder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
var ALPHABET_INDEX_MAP = ALPHABET.split('').reduce(function (res, letter, index) {
  res[letter] = index;
  return res;
}, {});
var PADDING = '=';
var DOUBLE_PADDING = '==';

var Base64 = /*#__PURE__*/function (_CommonEncoder) {
  _inherits(Base64, _CommonEncoder);

  var _super = _createSuper(Base64);

  function Base64() {
    _classCallCheck(this, Base64);

    return _super.call(this);
  }

  _createClass(Base64, [{
    key: "encodeFromByteArray",
    value: function encodeFromByteArray(bytes) {
      var bytesLength = bytes.length;

      if (bytesLength === 0) {
        return '';
      }

      var sizeMod3 = bytesLength % 3;
      var div3Size = bytesLength - sizeMod3;
      var temp;
      var res = [];

      for (var i = 0; i < div3Size; i += 3) {
        temp = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2];
        res.push(ALPHABET.charAt(temp >> 18));
        res.push(ALPHABET.charAt(temp >> 12 & 0x3F));
        res.push(ALPHABET.charAt(temp >> 6 & 0x3F));
        res.push(ALPHABET.charAt(temp & 0x3F));
      }

      if (sizeMod3 === 1) {
        temp = bytes[bytesLength - 1] << 16;
        res.push(ALPHABET.charAt(temp >> 18) + ALPHABET.charAt(temp >> 12 & 0x3F) + DOUBLE_PADDING);
      } else if (sizeMod3 === 2) {
        temp = bytes[bytesLength - 2] << 16 | bytes[bytesLength - 1] << 8;
        res.push(ALPHABET.charAt(temp >> 18) + ALPHABET.charAt(temp >> 12 & 0x3F) + ALPHABET.charAt(temp >> 6 & 0x3F) + PADDING);
      }

      return res.join('');
    }
  }, {
    key: "decodeToByteArray",
    value: function decodeToByteArray(str) {
      var strlength = str.length;

      if (strlength === 0) {
        return [];
      }

      if (strlength % 4 !== 0) {
        throw new Error('Base64 decode: wrong input');
      }

      var paddingSymbols = 0;

      if (str.charAt(strlength - 1) === PADDING) {
        paddingSymbols = 1;

        if (str.charAt(strlength - 2) === PADDING) {
          paddingSymbols = 2;
        }

        strlength -= 4;
      }

      var res = [];
      var temp;

      for (var i = 0; i < strlength; i += 4) {
        temp = ALPHABET_INDEX_MAP[str[i]] << 18 | ALPHABET_INDEX_MAP[str[i + 1]] << 12 | ALPHABET_INDEX_MAP[str[i + 2]] << 6 | ALPHABET_INDEX_MAP[str[i + 3]];
        res.push(temp >> 16);
        res.push(temp >> 8 & 0xFF);
        res.push(temp & 0xFF);
      }

      if (paddingSymbols === 1) {
        temp = ALPHABET_INDEX_MAP[str[strlength]] << 18 | ALPHABET_INDEX_MAP[str[strlength + 1]] << 12 | ALPHABET_INDEX_MAP[str[strlength + 2]] << 6;
        res.push(temp >> 16);
        res.push(temp >> 8 & 0xFF);
      } else if (paddingSymbols === 2) {
        temp = ALPHABET_INDEX_MAP[str[strlength]] << 18 | ALPHABET_INDEX_MAP[str[strlength + 1]] << 12;
        res.push(temp >> 16);
      }

      return res;
    }
  }]);

  return Base64;
}(_commonEncoder["default"]);

var base64 = new Base64(); // need because of multiple usage

var _default = base64;
exports["default"] = _default;