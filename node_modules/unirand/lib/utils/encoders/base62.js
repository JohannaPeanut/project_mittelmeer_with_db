"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _commonEncoder = _interopRequireDefault(require("./commonEncoder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CODES = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
var CODES_INDEX_MAP = CODES.split('').reduce(function (res, letter, index) {
  res[letter] = index;
  return res;
}, {});
var CODE_FLAG = '9';
var SPECIAL_CODE_MAP = {
  'A': 61,
  'B': 62,
  'C': 63
};

var Base62 = /*#__PURE__*/function (_CommonEncoder) {
  _inherits(Base62, _CommonEncoder);

  var _super = _createSuper(Base62);

  function Base62() {
    _classCallCheck(this, Base62);

    return _super.call(this);
  }

  _createClass(Base62, [{
    key: "encodeFromByteArray",
    value: function encodeFromByteArray(bytes) {
      var res = '';
      var b; // Iterate with 3 bytes as a group

      for (var i = 0; i < bytes.length; i += 3) {
        // #1 char
        b = (bytes[i] & 0xFC) >> 2;

        if (b < 61) {
          res += CODES[b];
        } else {
          res += CODE_FLAG + CODES[b - 61];
        }

        b = (bytes[i] & 0x03) << 4;

        if (i + 1 < bytes.length) {
          // #2 char
          b |= (bytes[i + 1] & 0xF0) >> 4;

          if (b < 61) {
            res += CODES[b];
          } else {
            res += CODE_FLAG + CODES[b - 61];
          }

          b = (bytes[i + 1] & 0x0F) << 2;

          if (i + 2 < bytes.length) {
            // #3 char
            b |= (bytes[i + 2] & 0xC0) >> 6;

            if (b < 61) {
              res += CODES[b];
            } else {
              res += CODE_FLAG + CODES[b - 61];
            } // #4 char


            b = bytes[i + 2] & 0x3F;

            if (b < 61) {
              res += CODES[b];
            } else {
              res += CODE_FLAG + CODES[b - 61];
            }
          } else {
            // #3 char, last char
            if (b < 61) {
              res += CODES[b];
            } else {
              res += CODE_FLAG + CODES[b - 61];
            }
          }
        } else {
          // #2 char, last char
          if (b < 61) {
            res += CODES[b];
          } else {
            res += CODE_FLAG + CODES[b - 61];
          }
        }
      }

      return res;
    }
  }, {
    key: "decodeToByteArray",
    value: function decodeToByteArray(str) {
      // Map for special code followed by CODE_FLAG '9' and its code index
      var decodedBytes = [];
      var strLength = str.length; // 6 bits bytes

      var unit = [0, 0, 0, 0]; // char counter

      var n = 0; // unit counter

      var m = 0; // regular char

      var char1; // special char

      var char2;
      var b;

      while (n < strLength) {
        char1 = str[n];

        if (char1 !== CODE_FLAG) {
          // regular code
          unit[m] = CODES_INDEX_MAP[char1];
          m += 1;
          n += 1;
        } else {
          n += 1;

          if (n < strLength) {
            char2 = str[n];

            if (char2 !== CODE_FLAG) {
              // special code index 61, 62, 63
              unit[m] = SPECIAL_CODE_MAP[char2];
              m++;
              n++;
            }
          }
        } // Add regular bytes with 3 bytes group composed from 4 units with 6 bits


        if (m === 4) {
          b = unit[0] << 2 | unit[1] >> 4;
          decodedBytes.push(b);
          b = (unit[1] & 0x0F) << 4 | unit[2] >> 2;
          decodedBytes.push(b);
          b = (unit[2] & 0x03) << 6 | unit[3];
          decodedBytes.push(b);
          m = 0;
        }
      } // Add tail bytes group less than 4 units


      if (m !== 0) {
        if (m === 1) {
          b = unit[0] << 2;
          decodedBytes.push(b);
        } else if (m === 2) {
          b = unit[0] << 2 | unit[1] >> 4;
          decodedBytes.push(b);
        } else if (m === 3) {
          b = unit[0] << 2 | unit[1] >> 4;
          decodedBytes.push(b);
          b = (unit[1] & 0x0F) << 4 | unit[2] >> 2;
          decodedBytes.push(b);
        }
      }

      return decodedBytes;
    }
  }]);

  return Base62;
}(_commonEncoder["default"]);

var base62 = new Base62(); // need because of multiple usage

var _default = base62;
exports["default"] = _default;