"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _base = _interopRequireDefault(require("./base62"));

var _base2 = _interopRequireDefault(require("./base64"));

var _base3 = require("./base32");

var _base4 = require("./base58");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var EncoderProxy = /*#__PURE__*/function () {
  function EncoderProxy() {
    _classCallCheck(this, EncoderProxy);

    this._allowed_encoders = {
      'base62': _base["default"],
      'base64': _base2["default"],
      'base32': _base3.Base32,
      'base32Hex': _base3.Base32Hex,
      'z-base-32': _base3.ZBase32,
      'crockford-base32': _base3.CrockfordBase32,
      'base58': _base4.BitcoinBase58,
      'bitcoin-base58': _base4.BitcoinBase58,
      'flickr-base58': _base4.FlickrBase58,
      'ripple-base58': _base4.RippleBase58
    }; // encoders already created must be in list of encoders by default

    this._encoders = {
      'base62': _base["default"],
      'base64': _base2["default"]
    };
  }
  /**
   * A list of allowed encoders
   * @returns {Array<string>} a list of encoders
   */


  _createClass(EncoderProxy, [{
    key: "setEncoder",
    value: function setEncoder(encoder) {
      if (!this._allowed_encoders[encoder]) {
        throw new Error("Encoder ".concat(encoder, " is not allowed"));
      } // if current encoder is the same - do nothing


      if (this._current_encoder_name === encoder) {
        return;
      }

      if (!this._encoders[encoder]) {
        this._encoders[encoder] = new this._allowed_encoders[encoder]();
      }

      this._current_encoder_name = encoder;
      this._current_encoder = this._encoders[encoder];
    }
  }, {
    key: "encode",
    value: function encode(str) {
      return this._current_encoder.encode(str);
    }
  }, {
    key: "encodeFromByteArray",
    value: function encodeFromByteArray(bytes) {
      return this._current_encoder.encodeFromByteArray(bytes);
    }
  }, {
    key: "decode",
    value: function decode(str) {
      return this._current_encoder.decode(str);
    }
  }, {
    key: "decodeToByteArray",
    value: function decodeToByteArray(str) {
      return this._current_encoder.decodeToByteArray(str);
    }
  }, {
    key: "encoders",
    get: function get() {
      return Object.keys(this._allowed_encoders);
    }
    /**
     * Current Encoder name
     * @returns {string} name of current Encoder
     */

  }, {
    key: "encoder_name",
    get: function get() {
      return this._current_encoder_name;
    }
  }]);

  return EncoderProxy;
}();

var encoderProxy = new EncoderProxy();
var _default = encoderProxy;
exports["default"] = _default;