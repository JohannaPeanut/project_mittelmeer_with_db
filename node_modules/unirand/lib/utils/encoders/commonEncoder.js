"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Common class for encoders
 * Created by Alexey S. Kiselev
 */
var CommonEncoder = /*#__PURE__*/function () {
  function CommonEncoder() {
    _classCallCheck(this, CommonEncoder);
  }

  _createClass(CommonEncoder, [{
    key: "encode",
    value: function encode(str) {
      var bytes = [];

      for (var i = 0; i < str.length; i += 1) {
        bytes[i] = str[i].charCodeAt(0);
      }

      return this.encodeFromByteArray(bytes);
    }
  }, {
    key: "decode",
    value: function decode(str) {
      var bytes = this.decodeToByteArray(str);
      var res = '';

      for (var i = 0; i < bytes.length; i += 1) {
        res += String.fromCharCode(bytes[i]);
      }

      return res;
    }
    /**
     * @abstract
     */
    // eslint-disable-next-line no-unused-vars

  }, {
    key: "encodeFromByteArray",
    value: function encodeFromByteArray(bytes) {
      throw new Error('encodeFromByteArray method not implemented');
    }
    /**
     * @abstract
     */
    // eslint-disable-next-line no-unused-vars

  }, {
    key: "decodeToByteArray",
    value: function decodeToByteArray(str) {
      throw new Error('decodeToByteArray method not implemented');
    }
  }]);

  return CommonEncoder;
}();

var _default = CommonEncoder;
exports["default"] = _default;