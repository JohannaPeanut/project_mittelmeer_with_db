"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Fast hashing murmur3 algorithm
 * Austin Appleby algorithm
 * https://en.wikipedia.org/wiki/MurmurHash
 */
var Murmur3Hash = /*#__PURE__*/function () {
  function Murmur3Hash() {
    _classCallCheck(this, Murmur3Hash);
  }
  /**
   * Calculates hash
   * @param {NumberString} data
   * @param {number} seed
   * @returns {number}
   */


  _createClass(Murmur3Hash, [{
    key: "hash",
    value: function hash(data) {
      var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (typeof data === 'string') {
        return this._hashFromString(data, data.length, seed);
      } else if (typeof data === 'number') {
        var s = data.toString();
        return this._hashFromString(s, s.length, seed);
      }

      throw new Error('You should point data as number or string');
    }
  }, {
    key: "_mul32",
    value: function _mul32(m, n) {
      var nlo = n & 0xffff;
      var nhi = n - nlo;
      return (nhi * m | 0) + (nlo * m | 0) | 0;
    }
  }, {
    key: "_hashFromString",
    value: function _hashFromString(data, len, seed) {
      var c1 = 0xcc9e2d51,
          c2 = 0x1b873593,
          h1 = seed,
          roundedEnd = len & ~0x1,
          k1;

      for (var i = 0; i < roundedEnd; i += 2) {
        k1 = data.charCodeAt(i) | data.charCodeAt(i + 1) << 16;
        k1 = this._mul32(k1, c1);
        k1 = (k1 & 0x1ffff) << 15 | k1 >>> 17;
        k1 = this._mul32(k1, c2);
        h1 ^= k1;
        h1 = (h1 & 0x7ffff) << 13 | h1 >>> 19;
        h1 = h1 * 5 + 0xe6546b64 | 0;
      }

      if (len % 2 === 1) {
        k1 = data.charCodeAt(roundedEnd);
        k1 = this._mul32(k1, c1);
        k1 = (k1 & 0x1ffff) << 15 | k1 >>> 17;
        k1 = this._mul32(k1, c2);
        h1 ^= k1;
      }

      h1 ^= len << 1;
      h1 ^= h1 >>> 16;
      h1 = this._mul32(h1, 0x85ebca6b);
      h1 ^= h1 >>> 13;
      h1 = this._mul32(h1, 0xc2b2ae35);
      h1 ^= h1 >>> 16;
      return h1;
    }
  }]);

  return Murmur3Hash;
}();

var _default = Murmur3Hash;
exports["default"] = _default;