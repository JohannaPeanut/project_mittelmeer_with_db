"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _murmur = _interopRequireDefault(require("./murmur3"));

var _jenkins = _interopRequireDefault(require("./jenkins"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DEFAULT_HASH_FUNCTION = 'murmur';

var HashProxy = /*#__PURE__*/function () {
  function HashProxy() {
    _classCallCheck(this, HashProxy);

    this._hashFunctions = {
      'murmur': new _murmur["default"]()
    };
    this._allowedHashFunctions = {
      'default': _murmur["default"],
      'murmur': _murmur["default"],
      'jenkins': _jenkins["default"]
    };
    this._currentHashFunctionName = DEFAULT_HASH_FUNCTION;
    this._currentHashFunction = this._hashFunctions[DEFAULT_HASH_FUNCTION];
  }
  /**
   * A list of allowed hash functions
   * @returns {Array<string>} a list of hash functions
   */


  _createClass(HashProxy, [{
    key: "listHashFunctions",
    value: function listHashFunctions() {
      return Object.keys(this._allowedHashFunctions);
    }
    /**
     * Current hash function name
     * @returns {string} name of current hash function
     */

  }, {
    key: "getDefaultHashFunctionName",

    /**
     * Default hash function name
     * @returns {string} name of default hash function
     */
    value: function getDefaultHashFunctionName() {
      return DEFAULT_HASH_FUNCTION;
    }
    /**
     * Sets hash algorithm
     * @param {string} name - name from allowed hash functions list
     */

  }, {
    key: "setHashFunction",
    value: function setHashFunction() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_HASH_FUNCTION;

      if (this._currentHashFunctionName === name || !this._allowedHashFunctions[name]) {
        return;
      }

      if (!this._hashFunctions[name]) {
        this._hashFunctions[name] = new this._allowedHashFunctions[name]();
      }

      this._currentHashFunctionName = name;
      this._currentHashFunction = this._hashFunctions[name];
    }
    /**
     * Return simple hash number
     * @param {NumberString} data
     * @param {number} seed
     * @param {number} modulo
     * @returns {number} hash number
     * @private
     */

  }, {
    key: "_hashNumber",
    value: function _hashNumber(data, seed, modulo) {
      if (!modulo) {
        return this._currentHashFunction.hash(data, seed || 0);
      }

      return this._mod(this._currentHashFunction.hash(data, seed || 0), modulo);
    }
    /**
     * Implement modulo by relying on the fact that the negative remainder
     * is always p numbers away from a positive reminder
     * Ex: -5 % 3 | -5 = -2 * 3 + 1 and -5 = -1 * 3 + (-2) | -2 + 3 = 1
     * @param {number} value
     * @param {number} p
     * @private
     */

  }, {
    key: "_mod",
    value: function _mod(value, p) {
      var r = value % p;
      return r < 0 ? r + p : r;
    }
    /**
     * Return array of hash numbers
     * @param {NumberString} data
     * @param {Array<number>} seed - array of seed numbers
     * @param {number} modulo
     * @return {Array<number>}
     * @private
     */

  }, {
    key: "_hashArray",
    value: function _hashArray(data, seed, modulo) {
      var res = [];

      for (var i = 0; i < seed.length; i += 1) {
        res[i] = this._hashNumber(data, seed[i], modulo);
      }

      return res;
    }
    /**
     * Hash
     * @param {NumberString} data - data to hash
     * @param {RandomArrayNumber} seed
     * @param {number} modulo
     * @returns {RandomArrayNumber} hash, can return array of hashes for different seeds
     */

  }, {
    key: "hash",
    value: function hash(data, seed, modulo) {
      if (Array.isArray(seed)) {
        return this._hashArray(data, seed, modulo);
      }

      return this._hashNumber(data, seed, modulo);
    }
  }, {
    key: "hashFunctionName",
    get: function get() {
      return this._currentHashFunctionName;
    }
  }]);

  return HashProxy;
}();

var _default = HashProxy;
exports["default"] = _default;