"use strict";

var _distributionFactory = _interopRequireDefault(require("./distributionFactory"));

var _analyzerFactory = _interopRequireDefault(require("./analyzerFactory"));

var _sample = _interopRequireDefault(require("./array_manipulation/sample"));

var _shuffle = _interopRequireDefault(require("./array_manipulation/shuffle"));

var _winsorize2 = _interopRequireDefault(require("./array_manipulation/winsorize"));

var _kfold = _interopRequireDefault(require("./array_manipulation/kfold"));

var _hash = _interopRequireDefault(require("./utils/hash"));

var _smooth = _interopRequireDefault(require("./array_manipulation/smooth"));

var _prngProxy2 = _interopRequireWildcard(require("./prng/prngProxy"));

var _encoderProxy = _interopRequireDefault(require("./utils/encoders/encoderProxy"));

var _uidFactory = _interopRequireDefault(require("./uidFactory"));

var _rouletteWheel = _interopRequireDefault(require("./array_manipulation/rouletteWheel"));

var _randomColor = _interopRequireDefault(require("./utils/randomColor"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var distributionMethods = require('./methods');

var Bernoulli = distributionMethods.bernoulli;
var Uniform = distributionMethods.uniform;

var RandomJS = function RandomJS() {
  var _this = this;

  _classCallCheck(this, RandomJS);

  this.analyze = null;
  this.utils = null;
  this._sample = new _sample["default"]();
  this._shuffle = new _shuffle["default"]();
  this._kfold = new _kfold["default"]();
  this._prng = _prngProxy2["default"]; // default PRNG with seed

  this._encoder = _encoderProxy["default"];
  this._distribution_factory = new _distributionFactory["default"]();
  this._randomColorFabric = _randomColor["default"].getInstance(1);
  this._uidFactory = new _uidFactory["default"]();
  Object.keys(distributionMethods).forEach(function (method) {
    /**
     *  Add a "random" method which contains different distribution methods
     *  Uses a factory pattern for creating instances of distributions classes
     *  @returns Object corresponds to distribution
     */
    Object.defineProperty(_this, method, {
      __proto__: null,
      get: function get() {
        return function () {
          var _this$_distribution_f;

          for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
          }

          (_this$_distribution_f = _this._distribution_factory).set_current_generator.apply(_this$_distribution_f, [method].concat(params));

          return _this._distribution_factory;
        };
      }
    });
  });
  /**
   * Add random array analyser
   * This method is long in constructor and short in methods
   * TODO: implement method short in constructor and long in methods
   * Use Analyzer factory to create method
   */

  Object.defineProperty(this, 'analyze', {
    __proto__: null,
    value: function value(randomArray, options) {
      return new _analyzerFactory["default"](randomArray, options);
    }
  });
  /**
   * Utils
   * Contains implementation for Gamma, Digamma functions, etc.
   */

  Object.defineProperty(this, 'utils', {
    __proto__: null,
    value: require(__dirname + '/utils/utils')
  });
  /**
   * Different string utils
   */

  Object.defineProperty(this, 'stringutils', {
    __proto__: null,
    value: require(__dirname + '/utils/string_utils')
  });
  /**
   * Random sample (k random elements from array with N elements 0 < k <= N)
   */

  Object.defineProperty(this, 'sample', {
    __proto__: null,
    value: function value(input, k, options) {
      var defaultOptions = {
        shuffle: false
      };

      if (_typeof(k) === 'object' || typeof k === 'undefined') {
        // assume that k is undefined, and the second parameter is options
        return _this._sample.getSample(input, undefined, Object.assign(defaultOptions, k));
      }

      return _this._sample.getSample(input, k, Object.assign(defaultOptions, options));
    }
  });
  /**
   * k-fold method
   */

  Object.defineProperty(this, 'kfold', {
    __proto__: null,
    value: function value(input, k, options) {
      var defaultOptions = {
        type: 'list',
        derange: false
      };
      return _this._kfold.getKFold(input, k, Object.assign(defaultOptions, options));
    }
  });
  /**
   * Simple shuffle method
   */

  Object.defineProperty(this, 'shuffle', {
    __proto__: null,
    value: function value(input) {
      return _this._shuffle.getPermutation(input);
    }
  });
  /**
   * Derange method
   */

  Object.defineProperty(this, 'derange', {
    __proto__: null,
    value: function value(input) {
      return _this._shuffle.getDerangement(input);
    }
  });
  /**
   * Chance - returns true with given probability
   */

  Object.defineProperty(this, 'chance', {
    __proto__: null,
    value: function value(trueProb) {
      var _chance = new Bernoulli(trueProb);

      if (_chance.isError().error) {
        throw new Error(_chance.isError().error);
      }

      return !!_chance.random();
    }
  });
  /**
   * RandomInRange- return uniformly distributed value in range
   */

  Object.defineProperty(this, 'randomInRange', {
    __proto__: null,
    value: function value(from, to) {
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

      var _uniform = new Uniform(Math.min(from, to), Math.max(from, to));

      if (_uniform.isError().error) {
        throw new Error(_uniform.isError().error);
      }

      if (n <= 0) {
        return _uniform.random();
      }

      return _uniform.distribution(n);
    }
  });
  /**
   * NextInRange- return uniformly distributed value in range
   */

  Object.defineProperty(this, 'nextInRange', {
    __proto__: null,
    value: function value(from, to) {
      var _uniform = new Uniform(Math.min(from, to), Math.max(from, to));

      if (_uniform.isError().error) {
        throw new Error(_uniform.isError().error);
      }

      return _uniform.next();
    }
  });
  /**
   * Winsorize method
   */

  Object.defineProperty(this, 'winsorize', {
    __proto__: null,
    value: function value(input) {
      var limits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.05;
      var mutate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var _winsorize = new _winsorize2["default"]();

      return _winsorize.winsorize(input, limits, mutate);
    }
  });
  /**
   * Hash function
   */

  Object.defineProperty(this, 'hash', {
    __proto__: null,
    value: function value(data, seed, options) {
      var opts;

      if (_typeof(seed) === 'object' && !Array.isArray(seed)) {
        // seed is option
        opts = Object.assign({
          algorithm: 'murmur',
          modulo: undefined
        }, seed);

        _hash["default"].setHashFunction(opts.algorithm);

        return _hash["default"].hash(data, 0, opts.modulo);
      }

      opts = Object.assign({
        algorithm: 'murmur',
        modulo: undefined
      }, options);

      _hash["default"].setHashFunction(opts.algorithm);

      return _hash["default"].hash(data, seed, opts.modulo);
    }
  });
  /**
   * Async Smooth
   */

  Object.defineProperty(this, 'smooth', {
    __proto__: null,
    value: function value(data, options) {
      return _smooth["default"].smooth(data, options);
    }
  });
  /**
   * Sync Smooth
   */

  Object.defineProperty(this, 'smoothSync', {
    __proto__: null,
    value: function value(data, options) {
      return _smooth["default"].smoothSync(data, options);
    }
  });
  /**
   * RouletteWheel
   */

  Object.defineProperty(this, 'newRouletteWheel', {
    __proto__: null,
    value: function value(weights, options) {
      return new _rouletteWheel["default"](weights, Object.assign({
        prng: _prngProxy2.DEFAULT_GENERATOR
      }, options));
    }
  });
  /**
   * Factory produces new PRNGs
   */

  Object.defineProperty(this, 'newPrng', {
    __proto__: null,
    value: function value(name) {
      var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      var _prngProxy = new _prngProxy2.PRNGProxy();

      _prngProxy.seed(seed);

      _prngProxy.set_prng(name);

      return _prngProxy;
    }
  });
  /**
   * PRNG seed
   */

  Object.defineProperty(this, 'seed', {
    __proto__: null,
    value: function value(seed_value) {
      _this._prng.seed(seed_value);
    }
  });
  /**
   * Sets PRNG
   */

  Object.defineProperty(this, 'prng', {
    __proto__: null,
    get: function get() {
      return _this._prng;
    }
  });
  /**
   * Sets Encoder
   */

  Object.defineProperty(this, 'encoder', {
    __proto__: null,
    value: function value(encoder) {
      _this._encoder.setEncoder(encoder);

      return _this._encoder;
    }
  });
  /**
   * Sets random uid generator
   */

  Object.defineProperty(this, 'uid', {
    __proto__: null,
    value: function value(generator) {
      _this._uidFactory.setGenerator(generator);

      return _this._uidFactory;
    }
  });
  /**
   * Returns seeded random value [0, 1) with uniform distribution
   */

  Object.defineProperty(this, 'random', {
    value: function value() {
      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return _this._prng.random(n);
    }
  });
  /**
   * Returns seeded next value [0, 1) with uniform distribution
   */

  Object.defineProperty(this, 'next', {
    value: function value() {
      return _this._prng.next();
    }
  });
  /**
   * Returns seeded random integer value [0, 2^32) with uniform distribution
   */

  Object.defineProperty(this, 'randomInt', {
    value: function value() {
      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return _this._prng.randomInt(n);
    }
  });
  /**
   * Returns seeded next integer value [0, 2^32) with uniform distribution
   */

  Object.defineProperty(this, 'nextInt', {
    value: function value() {
      return _this._prng.nextInt();
    }
  });
  /**
   * Returns random color
   */

  Object.defineProperty(this, 'randomColor', {
    value: function value(saturation) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hex';
      var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

      if (!_randomColor["default"].getTypes()[type]) {
        throw new Error("Type ".concat(type, " is not allowed"));
      }

      _this._randomColorFabric.setSaturation(saturation);

      return _this._randomColorFabric.randomColor(type, n);
    }
  });
  /**
   * Returns next random color
   */

  Object.defineProperty(this, 'nextColor', {
    value: function value(saturation) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hex';

      if (!_randomColor["default"].getTypes()[type]) {
        throw new Error("Type ".concat(type, " is not allowed"));
      }

      _this._randomColorFabric.setSaturation(saturation);

      return _this._randomColorFabric.nextColor(type);
    }
  });
}; // Add methods extractor


var randomjs = new RandomJS();
var methods = {
  analyze: randomjs.analyze,
  utils: randomjs.utils,
  stringutils: randomjs.stringutils,
  sample: randomjs.sample,
  kfold: randomjs.kfold,
  shuffle: randomjs.shuffle,
  derange: randomjs.derange,
  chance: randomjs.chance,
  winsorize: randomjs.winsorize,
  hash: randomjs.hash,
  smooth: randomjs.smooth,
  smoothSync: randomjs.smoothSync,
  seed: randomjs.seed,
  prng: randomjs.prng,
  encoder: randomjs.encoder,
  uid: randomjs.uid,
  random: randomjs.random,
  next: randomjs.next,
  randomInt: randomjs.randomInt,
  nextInt: randomjs.nextInt,
  randomInRange: randomjs.randomInRange,
  nextInRange: randomjs.nextInRange,
  newRouletteWheel: randomjs.newRouletteWheel,
  newPrng: randomjs.newPrng,
  randomColor: randomjs.randomColor,
  nextColor: randomjs.nextColor
};
Object.keys(distributionMethods).forEach(function (rand_method) {
  methods[rand_method] = Object.getOwnPropertyDescriptor(randomjs, rand_method).get();
});
module.exports = methods;